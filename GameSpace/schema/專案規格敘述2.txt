GameSpace 遊戲論壇平台完整規格文件
系統總覽與範圍

GameSpace 是一個結合遊戲討論與社群互動的綜合平台，涵蓋會員系統、遊戲資訊追蹤、線上社群以及商務交易等功能。整個系統採用 MVC 架構實作，前端顯示層、業務邏輯層與資料存取層嚴格分離，使用者操作由 Controller 接收，再由 Service 處理業務規則，最後透過 Repository 存取資料庫。系統以三層式架構（Presentation/Business/Data Layer）設計，並透過 DTO 等物件在各層傳遞資料，提升模組化和維護性。基礎資料庫採用 Microsoft SQL Server，設計了多張資料表覆蓋會員資料、寵物屬性、遊戲論壇、交易訂單等核心資料（詳細結構見「資料表結構」章節）。

系統功能範圍包含：會員註冊與認證、會員錢包（點數管理）、每日簽到獎勵、寵物養成系統、小遊戲冒險、官方商城（訂單管理、商品展示）、玩家自由市場（C2C 交易）、優惠券/電子禮券系統、遊戲熱度指標追蹤與排行榜、遊戲討論論壇、好友與群組社群、即時聊天、通知系統、收藏與按讚互動、管理後台權限控制等模組。

系統範圍排除：實體商品物流配送（僅記錄訂單與數位交付，不處理實體運送）、手機行動 App（僅開發 Web 平台，未包含 App 部分）、多語言國際化（目前僅支援繁體中文 zh-Hant）、遊戲內容嵌入（僅追蹤外部遊戲數據，未內嵌可交互遊戲）。以上排除項目未在本版本中實作。

術語定義

為避免歧義，以下統一重要名詞術語：

會員錢包系統術語：

禮券（E-voucher）：會員可扣除會員點數兌換取得的電子禮券，用於兌換實體商品或折抵現金。

優惠券（Coupon）：官方商城專用的折扣券，只能在官方商城內使用，例如免運券、折扣券等。

會員點數（Point）：平台內的虛擬貨幣，可用於兌換禮券、優惠券，或購買寵物膚色/背景等虛擬商品。

每日簽到系統術語：

每日簽到：會員每日可進行一次的簽到操作。

連續簽到：會員連續多日簽到所形成的簽到記錄。

簽到獎勵：會員完成每日簽到後獲得的獎勵，包括會員點數、寵物經驗值或商城優惠券等。

寵物系統術語：

史萊姆寵物：平台提供的虛擬寵物，目前為可愛造型的史萊姆，具有五項屬性。

五維屬性：指寵物的五項狀態值：飢餓、心情、體力、清潔、健康。

寵物經驗值：寵物升級所需累積的經驗數值。

等級：寵物成長階段的等級指標，等級提升可獲得獎勵。

小遊戲系統術語：

小遊戲：平台內的冒險小遊戲，玩家可派出寵物參與戰鬥。

冒險遊戲：與“小遊戲”同義，指小遊戲冒險挑戰。

遊戲次數限制：每日最多可進行 3 次小遊戲挑戰的限制。

技術架構與開發環境

後端技術棧：本專案採用 ASP.NET MVC + C# 作為主要後端框架。資料庫使用 Microsoft SQL Server，資料存取透過 Entity Framework Core (ORM) 實作，遵循 Repository 模式以分離資料庫操作。系統採用三層式架構，包括表現層（ASP.NET MVC 控制器與 Razor 視圖）、業務邏輯層（各功能模組的服務與控制器，例如 SignInController、PetController 等）以及資料存取層（Repository 和 EF Core）。前端部分使用 Razor 模板引擎搭配 HTML/CSS/JavaScript 開發，UI 框架採用 Bootstrap，並視需要整合現代化前端技術如 Vue.js、Tailwind CSS 等提升互動體驗。

開發工具：開發環境使用 Visual Studio 2022 或 VS Code，版本控制使用 Git（GitHub），資料庫管理透過 SQL Server Management Studio (SSMS)。API 測試使用 Postman 或 Swagger UI 進行。自動化測試方面，單元測試使用 xUnit 或 MSTest，整合測試可使用 ASP.NET Core TestHost，端對端測試則可採用 Selenium WebDriver。部署方面，本專案可選用 Docker 進行容器化，並使用 GitHub Actions 或 Azure DevOps 建置 CI/CD。生產環境監控使用 Application Insights 等工具，日誌記錄採用 Serilog 或 NLog。

資料庫設計：後端資料庫使用 SQL Server，資料類型採用 SQL Server 原生類型（int, nvarchar, datetime2, bit, decimal, varbinary(max) 等）。每張資料表均設計了適當的主鍵（多使用自增 INT 型）、唯一索引及必要的複合索引以優化查詢。所有外鍵關係均定義完整，以確保參考完整性；所有資料表與欄位具備詳細的中文註解以方便維護。

認證與授權：系統支援多種登入方式，包括傳統 Email/帳號密碼登入以及 OAuth 第三方登入（例如 Google、Facebook、Discord）。登入成功後，伺服器簽發 JWT Token 或建立 Session Cookie 以維持使用者會話。系統實作基於角色的存取控制（RBAC），使用者與管理員的操作權限由其角色與權限設定決定。所有後端 API 均透過 [Authorize] 屬性檢查 JWT 權限與使用者角色，在進行敏感操作（如購物、留言、管理後台）前會驗證使用者是否具有相應的權限。若未通過權限驗證，API 將返回 HTTP 401（未授權）或 403（禁止存取）的錯誤。

非功能性需求（NFR）

效能要求：平台須確保良好的效能。頁面載入時間應低於 3 秒；REST API 的平均響應時間應低於 1 秒。系統需支援至少 1000 名以上的同時在線使用者，並發時系統保持穩定。對於複雜的資料查詢操作，應優化 SQL 或使用索引確保執行時間在 5 秒以內。系統前端採用漸進式加載與快取策略減少延遲。為應對高併發，系統可透過水平擴充（增加伺服器實例）來提高吞吐量，同時可使用 Redis 或 Memory Cache 進行快取減輕資料庫負載。靜態資源（圖片、JS/CSS）則可部署於 CDN 以加速全球訪問。

安全性要求：系統高度重視安全。使用者密碼在資料庫中必須使用強雜湊（例如 bcrypt 或 PBKDF2）儲存，決不能以明文形式保存。所有資料傳輸必須經由 HTTPS（TLS 1.2 以上）加密通道進行，防止中間人攔截。後端對資料庫查詢採用參數化查詢，杜絕 SQL Injection 攻擊風險；前端與後端皆實施嚴格的輸入驗證和輸出編碼，防範 XSS 跨站腳本攻擊。身份驗證方面支援多因子驗證（2FA），例如 Email 確認或手機簡訊驗證。授權控制方面，採用 RBAC 管理使用者權限，並以最小權限原則配置各角色功能。為保障 API 安全，實作頻率限制（Rate Limiting）及 API Key 驗證（對內部 API）等機制。系統保存操作審計日誌：對所有敏感操作（如登入、交易、後台管理）皆記錄詳細日誌，以便於日後追蹤和審計。

擴充性與維護：系統設計須具有高度擴充性，可隨專案需求演進進行模組擴充與升級。程式碼遵循SOLID原則，模組解耦以方便替換或重構。資料庫考慮將高頻日志或歷史資料進行分區或拆分（例如將聊天訊息依月份分表）來維持性能。系統提供容錯機制：關鍵操作包裹在資料庫交易中，若過程發生錯誤將回滾避免資料不一致。對第三方服務（如 OAuth、支付網關）調用設置超時與重試策略，避免依賴外部導致功能阻塞。

前端設計與UI規範

設計系統：前端介面採用玻璃風設計風格，支援亮色與暗色兩種主題。主色調為紫色 (#7557ff)，次要搭配藍色 (#34d2ff)；成功訊息色使用綠色 (#22c55e)。背景以漸層呈現：亮色模式下從#eef3f8 過渡到 #ffffff，暗色模式下從 #0c111b 過渡到 #0a0f18。主要文字顏色在亮色模式為 #1f2937，在暗色模式為 #e5edff，次要文字為 #64748b（亮）或 #9fb1c9（暗）。

字體與版面：字體採用系統預設字型搭配思源黑體 (Noto Sans TC) 及微軟正黑等無襯線字體。基本字號為 16px，行高約為字號的 1.65 倍以確保易讀性。版面設計基於 8px 的網格系統控制間距，常用的內外間距依序為 12px、16px、24px、32px 等。頁面邊距在手機端為 16px，平板為 24px，桌面為 32px，以適配不同裝置尺寸。

響應式與互動：整體 UI 採用響應式設計，確保在桌面、平板與手機等不同解析度裝置上介面均能良好顯示。針對較小螢幕，某些次要資訊欄位會自動隱藏或折疊，由使用者點擊按鈕展開查看。交互方面，大量採用 AJAX 或 Fetch 進行局部資料更新，提升用戶體驗的即時性。針對遊戲相關的動畫頁面，採用 CSS3 或 Canvas/WebGL 技術繪製，並使用 requestAnimationFrame 進行動畫渲染，以確保流暢度和效能。介面動效廣泛運用硬體加速（CSS Transitions/Transforms）減少重繪負擔，並結合音效增強沉浸感。


會員認證與帳號系統

功能描述：會員認證系統負責處理使用者的註冊、登入、身份驗證和權限控管。會員基本資料分散儲存在多個資料表中，包括 Users（帳號主檔）、User_Introduce（個人檔案）、User_Rights（權限設定）、UserTokens（登入/認證 Token 紀錄）等。新用戶註冊時需提供帳號、密碼、電子郵件、手機號碼、身份證字號、暱稱、出生日期等資訊，後端將驗證這些資訊的格式與唯一性（例如帳號、Email、電話號碼和身分證字號均需唯一）。若註冊資料通過驗證，系統會在 Users 表建立帳號記錄，並於 User_Introduce 表寫入對應的個人資訊。同時產生默認的權限設定(User_Rights)，例如 User_Status 設為正常（1）等。系統也會發送驗證信件或簡訊以確認 Email/手機。密碼在儲存前經過不可逆雜湊處理，確保資料安全。

Users 資料表的主要欄位包括：User_ID（主鍵）、User_Account（登入帳號，唯一）、User_Password（雜湊後的密碼）、User_EmailConfirmed/PhoneConfirmed（Email/手機驗證標誌）、User_AccessFailedCount（登入失敗次數）、User_LockoutEnabled（是否啟用鎖定）、User_LockoutEnd（帳戶鎖定截止時間）等。系統利用 User_AccessFailedCount 來記錄連續登入失敗次數；當其超過預設上限時，User_LockoutEnabled 會被設置鎖定且 User_LockoutEnd 欄位標記解鎖時間，在此之前使用者無法登入。UserTokens 表則記錄使用者的登入 Token（例如發行重設密碼連結的Token或第三方登入資訊），包含 Token 值、提供者（Provider）名稱、過期時間等欄位。這可用於實現例如 “記住我” 功能或 OAuth 資料記錄。

權限與角色：每個會員在 User_Rights 表中對應一筆權限紀錄，欄位如 User_Status（使用者狀態，例如正常=1、停權=0）、ShoppingPermission（商城購物權限）、MessagePermission（論壇發文留言權限）、SalesAuthority（開啟自由市場銷售權限）等。系統根據這些欄位控制功能開關：例如 ShoppingPermission=0 的帳號將無法進行商城購物，MessagePermission=0 則禁止在論壇發表文章或留言。SalesAuthority=1 方可申請成為賣家上架商品（詳見商城系統）。管理後台有獨立的管理員帳號系統，ManagerData 表存儲管理員資訊，包括 Manager_Account、Manager_Password（同樣需雜湊）、Email 及鎖定相關欄位。管理員的角色權限由 ManagerRolePermission 表定義，每個角色有不同的許可權布林值欄位，例如 UserStatusManagement（管理使用者狀態權限）、ShoppingPermissionManagement（商城管理權限）、MessagePermissionManagement（論壇內容管理權限）、Pet_Rights_Management（寵物系統管理權限）等。ManagerRole 表則將管理員分配到一個或多個角色，實現多對多的角色指派。透過這套角色權限機制，管理後台也實現了 RBAC 控制，只有被賦予特定角色的管理員才能使用相應後台功能。

資料庫關聯：Users 表作為會員的主檔，通過主鍵 User_ID 與多張表產生關聯。User_Introduce 和 User_Rights 皆以 User_ID 作為主鍵及外鍵，與 Users 表一對一對應。這表示每新增一個 Users 紀錄，必須同步新增對應的 User_Introduce 及 User_Rights 紀錄，以初始化使用者的個人資訊與權限。注意：管理員帳號與會員帳號資料表分開，ManagerData 以獨立的 Manager_Id 作主鍵，不會與 Users 表互相混用。

註冊流程：用戶透過前端提供的註冊頁面填寫帳號、密碼及個人資訊提交註冊申請。前端進行基本的格式驗證（例如密碼強度、Email 格式）後，呼叫後端 API /api/auth/register 傳送用戶輸入資料。後端接收到請求後，執行以下步驟： (1) 檢查帳號、Email、手機等是否已被註冊；(2) 如果資料有效且未重複，建立 Users、User_Introduce、User_Rights 對應記錄；(3) 將密碼欄位使用安全雜湊後存儲；(4) 產生 Email 驗證信或手機驗證碼並發送給使用者；(5) 回傳註冊成功結果給前端。前端收到成功響應後，提示使用者查收驗證信完成後續驗證。若任一驗證步驟失敗（例如帳號重複或格式錯誤），後端將回傳對應錯誤訊息（如 400 Bad Request）並說明原因。註冊成功的帳號在驗證Email/手機前可能受限部分功能（User_EmailConfirmed 為0時可限制其發文或交易）。

登入流程：使用者在登入頁面輸入帳號（或Email）與密碼後提交登入請求。後端收到後查詢 Users 表檢索相符的帳號，然後比對密碼雜湊是否正確。如果密碼錯誤，將累加該 User 的 User_AccessFailedCount 欄位計數；若連續失敗次數超出系統上限（例如 5 次），則將 User_LockoutEnabled 設為 1 並設定 User_LockoutEnd 為鎖定截止時間（如 15 分鐘後）。若驗證通過且帳號狀態正常 (User_Status=1)，後端生成 JWT Token 或建立 Session，並在回應中返回 Token 供前端保存（例如存於 localStorage 或 Cookie）。前端隨後帶著該 Token 進入系統，後續所有需要身份驗證的 API 請求都在 Header 附帶此 Token。後端採用中介軟體驗證 Token 的有效性及解析其中的 UserID，繼而加載使用者資料與權限。若帳號被鎖定或停權 (User_Status=0 或鎖定尚未解除)，登入請求將被拒絕並返回相應錯誤（如帳號已停權或暫時鎖定）。

權限控管流程：所有經過身份驗證的後端 API 都會根據使用者的權限決定是否授權執行。例如，當一般會員嘗試存取管理後台功能時，由於缺乏管理員角色，其請求將被拒絕返回 HTTP 403。再如，使用者在商城購物結帳時，系統會檢查該用戶的 User_Rights.ShoppingPermission 是否為 1；若為 0 則禁止下單操作並返回錯誤訊息。類似地，論壇發文時檢查 MessagePermission 欄位，無權者則顯示無法發言提示。管理員登入後，系統會核對其 ManagerRole 設定，決定顯示哪些後台功能選單：例如只有擁有 Pet_Rights_Management 權限的管理員才能進入寵物系統管理介面。此外，對於使用者之間的互動，如加好友或發送訊息，後端會檢查雙方關係與封鎖狀態（Relation.Status）；若發現目標用戶將發送者封鎖，則拒絕聊天訊息送達。所有未通過授權的操作都會被記錄到審計日誌，以備日後檢查。

使用流程（會員註冊與登入）：

帳號註冊：小明透過首頁的「註冊」按鈕進入註冊頁，按照提示輸入帳號、密碼、Email 等必要資訊並提交。系統即時檢查他填寫的帳號是否已被使用，以及密碼強度是否符合要求（例如至少8字元，包含大小寫與數字）。小明提交後，後端成功建立他的會員帳戶，並立即發出一封驗證信到他提供的 Email。小明在信中點擊驗證連結，系統確認後將他的 EmailConfirmed 狀態標記為已驗證。此時，小明的帳號就完全啟用了。

帳號登入：小明返回網站點擊「登入」，輸入剛才註冊的帳號和密碼嘗試登入。由於密碼正確且帳號已驗證，後端簽發了一組 JWT 身份憑證給前端。前端保存該 Token 後，自動將頁面跳轉到會員中心首頁，右上角顯示小明的暱稱來表明已登入狀態。此後，小明每次發出需要權限的操作請求（例如編輯個人資料、發表文章），瀏覽器都會自動附帶 JWT Token，後端驗證該 Token 有效且未過期，小明即可順利使用相關功能。如果小明連續幾次輸入錯誤密碼導致帳號被鎖定，前端會收到錯誤回應，提示「帳號已鎖定，請稍後再試」，小明必須等待鎖定時間過後或透過「忘記密碼」流程重置密碼才能重新登入。整個過程對小明而言是透明的，但在後端已經完整記錄了他的註冊、Email 驗證及每次登入嘗試的狀態，以確保安全性和可追溯性。

會員錢包系統

功能描述：會員錢包系統管理每個會員的虛擬點數餘額，以及與點數相關的交易歷史。在 GameSpace 平台中，每位會員都有一個專屬的虛擬貨幣帳戶，即會員點數 (Point) 帳戶，可用於兌換商城優惠券、禮券，或購買虛擬道具（例如寵物的膚色或背景主題）。會員錢包相關的核心資料表有兩個：User_Wallet 和 WalletHistory。User_Wallet 表是一對一錢包主檔，每個會員（User）對應唯一一筆錢包記錄。其欄位包括 User_Id（會員ID，主鍵也是外鍵，參照 Users.User_ID）和 User_Point（當前可用的點數餘額）。此表不再儲存任何優惠券或禮券的數量欄位——原先規劃的 Coupon_Number / EVoucher_Number 欄位已從錢包表移除，改為獨立的券類資料表進行管理。

WalletHistory 表是錢包異動日誌，用來記錄每一次會員點數或券類資產的變動。其欄位包含 ChangeType（異動類型，例如 "Point" 點數、"Coupon" 優惠券、"EVoucher" 禮券）、PointsChanged（點數增減值，正值表示獲得，負值表示消費）、ItemCode（如涉及券則記錄券的代碼）、Description（文字描述此異動原因，例如「每日簽到+20點」或「兌換85折優惠券-500點」）以及 ChangeTime（異動發生時間）。WalletHistory 以 UserID 和 ChangeTime 建立索引，方便前台會員查詢自己的錢包明細，以及後台管理員進行審計。這允許用戶在「我的錢包明細」中按時間順序查看歷史交易紀錄，也讓管理員能針對特定用戶的交易紀錄進行調查。

商業規則：會員點數被定義為不可為負的整數單位，通常 1 點等價於平台內的 1 單位虛擬幣。會員可透過多種方式獲得點數：每日簽到、參與小遊戲挑戰、官方活動獎勵或管理員人工發放獎勵等。每當發生這類事件，後端會在處理該事件的業務邏輯中，調用錢包服務增加相應的 User_Wallet.User_Point 值，並寫入一筆 WalletHistory 紀錄。例如，當用戶完成每日簽到時，系統會執行 User_Wallet.User_Point += 獲得點數，同時在 WalletHistory 表新增一行記錄，ChangeType="Point"，PointsChanged 設為該次新增的點數值，Description 填寫「每日簽到獲得+X點」。點數的消費則發生於用戶兌換優惠券或禮券時。當用戶在錢包介面選擇一項優惠券/禮券進行兌換，後端會先檢查 User_Wallet.User_Point 是否足夠支付該券所需點數成本 (PointsCost)。若餘額充足，則在一個資料庫交易中同時執行：扣減 User_Point 相應點數、在 Coupon 或 EVoucher 表為用戶新增一張券、並在 WalletHistory 新增一筆對應記錄。若點數不足，則錢包前端介面的兌換按鈕將被禁用或點擊後提示「餘額不足」，整個兌換請求不會提交。

為確保資料一致性與防止並發問題，所有對 User_Wallet 點數的更新操作都應在資料庫交易 (Transaction) 中執行，並需要適當的鎖機制（例如行鎖定）來避免併發修改導致的競爭條件。更新點數時也必須嚴格檢查結果不能為負數：如果計算結果試圖將 User_Point 減至 0 以下，則該交易應該回滾並返回錯誤。例如，兩筆同時進行的扣點操作導致餘額負值，後端需檢測並中止其中一筆，確保 User_Point >= 0。

前台功能：會員可在網站的「會員中心」或「我的錢包」頁面查看自己的點數餘額。介面上即時顯示 User_Point 數值，並提供點數變動明細查詢功能：點擊「查看收支明細」可拉取 WalletHistory 列表，顯示每筆點數或券的增減、時間及原因。同一介面也提供優惠券與禮券分頁，讓使用者查看自己目前持有的所有商城優惠券和電子禮券。在「我的優惠券」分頁，用戶可以看到每張優惠券的代碼、折扣內容、有效期限以及使用狀態（未使用或已使用）；在「我的禮券」分頁則列出電子禮券的代碼（一般以大寫英數字組成，可轉換為條碼或 QR Code 顯示）、禮券面額或內容描述、有效期限及使用狀態。這些券的資訊並非直接存放於 User_Wallet，而是透過查詢 Coupon 表和 EVoucher 表獲取，但在錢包UI中整合展示。前端錢包頁面也提供「點數兌換券」的操作入口：用戶可選擇想兌換的優惠券或禮券類型，系統會顯示所需點數成本，點擊確認後調用後端 API 進行兌換。如果兌換成功，新獲得的券會即時出現在對應的券列表中。錢包頁面在行動裝置上會自動隱藏某些較長的欄位（如完整券代碼）以保持版面整潔，使用者可點擊展開按鈕來查看完整資訊。

後端服務：後端實作 WalletController 和 WalletService 來處理錢包相關的邏輯。例如，GET /api/wallet 用於獲取當前登入會員的錢包總覽資訊，包括點數餘額以及各類券的數量；GET /api/wallet/history 可查詢用戶的點數異動明細，支援分頁和篩選；POST /api/wallet/redeem-coupon 用於會員請求以點數兌換一張優惠券。後端在這些 API 中首先會驗證請求的 JWT Token 確認身份，再執行業務邏輯。在執行加點或扣點操作時，會調用 WalletService 中的方法，例如 AddPoints(userId, amount, description) 或 RedeemCoupon(userId, couponTypeId) 等。服務方法內部負責執行前述的交易機制，同步更新多張表並處理錯誤回滾。此外，管理員在後台也有介面可以調整用戶點數：AdminWalletController 提供例如 POST /api/admin/wallet/{userId}/adjust 的端點，允許超管手動增減特定會員的點數（例如客服補償或懲罰扣點），此類操作必須有管理權限且會寫入日誌。所有管理員對錢包的操作（例如發放點數、刪除不當獎勵）都需記錄在審計日誌中，以確保日後可追溯每筆異動由誰執行、執行原因。

使用流程（錢包與點數）：
小紅每天登入後首先查看自己的會員點數餘額，以便安排要參與的活動和兌換獎勵。她點擊網站頂部的「我的錢包」，立即看到頁面上顯示「當前點數：1200 點」。今天是活動最後一天，小紅決定用 500 點兌換一張「滿 1000 折 100」的商城優惠券。她切換到「我的優惠券」分頁，點擊「兌換優惠券」按鈕，彈出兌換選單，從中選擇了「滿額折抵100券」（需要500點）。系統檢查她目前的點數是否足夠（1200 ≥ 500），然後在彈出的確認視窗中提示「將扣除 500 點，兌換優惠券代碼：PROMO100，是否確認？」。小紅點擊確認後，前端呼叫後端完成扣點和發券操作。數秒內，小紅的點數餘額更新為 700 點，同時在「我的優惠券」列表中出現了一張新的優惠券代碼。她複製了該優惠券代碼，隨後前往商城選購商品。在結帳時，小紅將剛獲得的券碼貼上並點擊「套用」，訂單金額成功減免了 $100。

隔日，小紅再次登入進行每日簽到。簽到完成後，系統自動增加了她的會員點數（例如 +20 點）並贈送了一張 85 折優惠券作為連續簽到7天的獎勵。小紅打開錢包明細查看，發現最新一筆記錄顯示：「每日簽到獲得 +20 點」。同時「我的優惠券」中也新增了一張 85 折券。幾天後，小紅參與小遊戲挑戰並贏得勝利，她的寵物獲得經驗的同時，自己的會員點數也增加了 50 點作為遊戲獎勵。她再次打開錢包，錢包餘額相應上升，並能在收支明細中看到「小遊戲勝利獲得 +50 點」的紀錄。整個錢包系統的使用對小紅而言十分直觀：點數餘額及時更新，收支明細清晰列出每次變動來源，優惠券/禮券亦集中管理，一目了然。目前小紅積累點數後可以自主決定如何消費，如兌換更多優惠券或禮券；若點數不足，她也知道需要參與更多活動或等待每日簽到來累積點數。整個過程中，所有點數變動皆受到系統嚴格管控，確保帳戶安全：例如連續快速的重複扣點請求會被攔截，避免惡意重複扣款。小紅對錢包系統的安全性和透明度感到信任，樂於持續參與平台活動以獲取和使用點數。

每日簽到系統

功能描述：每日簽到系統允許會員每天主動簽到一次，以獲取積分獎勵和其他獎品。該模組旨在提升用戶日常活躍度和留存率，透過連續簽到獎勵機制鼓勵用戶每日回訪。簽到相關資料記錄在 UserSignInStats 資料表中，每當用戶完成簽到動作，系統都會在此表新增一筆紀錄以保存簽到時間及獲得的獎勵。UserSignInStats 表的欄位包括：LogID（簽到日誌流水號，主鍵，自增）、UserID（會員 ID）、SignTime（簽到時間）、PointsGained（此次簽到獲得的點數量）、PointsGainedTime（點數發放時間）、ExpGained（此次簽到獲得的寵物經驗值）、ExpGainedTime（經驗值發放時間）、CouponGained（若當日活動贈送優惠券則記錄券碼，否則為 "0"）、CouponGainedTime（優惠券發放時間）。資料表上建立了複合索引 (UserID, SignTime)，可加速查詢某個會員在一段期間內的簽到記錄，或統計其連續簽到狀況。

簽到規則：系統限制每位會員每天只能簽到一次。判斷依據為 UserSignInStats 裡是否已有該會員在「今天」的記錄。由於 SignTime 是精確到日期時間的欄位，可透過查詢當日 00:00 之後是否存在 UserID 的紀錄來判定。若已簽到，則拒絕重複簽到請求並返回錯誤訊息「今日已簽到」。成功簽到後，系統會根據定義的獎勵機制發放獎品。基本獎勵通常是固定點數，例如每日簽到獲得 +20 點（假設值）。此外，系統支援連續簽到獎勵：例如設定連續簽到滿7天時額外贈送 100 點和一張優惠券，連續簽到滿14天時可能贈送更高額的獎勵，以此類推。如果當天碰上特殊活動或節日，管理員也可配置特殊簽到獎勵，例如在特定日期簽到會獲得雙倍點數或限定禮券。所有這些規則都可在後台進行配置和調整。當用戶達成條件時，後端會自動將對應的獎勵值填入 UserSignInStats 的 PointsGained、ExpGained 或 CouponGained 欄位中。例如，小明連續簽到了第7天，系統在新增簽到記錄時同時寫入 PointsGained=20（基本點數）和 CouponGained="DISC20"（折扣券代碼），並在 Coupon 表為他新增一張 8折優惠券。為避免重複發獎，後端在計算獎勵時需檢查連續簽到天數是否剛好達成門檻且之前沒發過該獎勵。

獎勵發放與整合：當用戶成功簽到後，後端將進行一系列原子操作：在一個資料庫 Transaction 中完成 (1) 新增 UserSignInStats 紀錄、(2) 更新會員點數餘額、(3) 更新寵物經驗值（若有綁定寵物）、(4) 如有優惠券獎勵則新增 Coupon 紀錄。具體而言，系統會執行 INSERT INTO UserSignInStats(...) 寫入簽到時間與各項獎勵值；接著執行 UPDATE User_Wallet SET User_Point = User_Point + PointsGained 增加會員錢包點數，同時透過 WalletHistory 紀錄本次簽到獲得點數的明細（Description 如「每日簽到獲得+20點」）；如果 ExpGained > 0，則執行 UPDATE Pet SET Experience = Experience + ExpGained 找到該會員的寵物累加經驗，並檢查是否達到升級門檻（如超過則提升等級並更新 Pet.Level 和 Pet.LevelUpTime 等）；如果 CouponGained 欄位不為 "0"，則表示需要發放優惠券，系統將從 CouponType 定義中找到對應的優惠券類型，生成唯一券碼，插入一筆新的 Coupon 記錄給該會員（UserID 對應，CouponCode 隨機生成，IsUsed=0 等），並將此券碼填寫回 UserSignInStats.CouponGained。上述所有操作在同一個交易中提交，以確保獎勵發放和簽到記錄的一致性。最後返回成功結果給前端，讓用戶端可以即時顯示「簽到成功，獲得 X 點」的提示。

錯誤處理：若在簽到過程中某一步驟發生異常（例如資料庫連線中斷或新增 Coupon 失敗等），後端會回滾整個交易，以確保不會出現簽到記錄新增了但點數沒發放，或點數扣除但券沒給的情況。回滾後後端向前端返回一個錯誤代碼（如 CHECKIN001）和友好訊息。前端收到錯誤時，會提示用戶「簽到失敗，請稍後再試」之類的訊息。系統也會將錯誤細節記錄在伺服器日誌中，便於開發人員排查問題。

後台管理：管理員在後台可以設定和調整簽到規則。例如透過 AdminCheckInController 介面配置每日簽到的基礎點數獎勵、各級連續簽到額外獎勵內容以及特殊日期的獎勵方案。若有需要，管理員也可在後台檢視所有用戶的簽到記錄（UserSignInStats 清單），並有權執行手動調整，例如「補簽」或修改某用戶的簽到次數。補簽通常需要扣除會員一定點數或使用特定補簽券才能執行：管理員可為用戶發放一張特殊優惠券作為補簽許可，讓用戶下次登入時可以使用該券補登昨天的簽到。若用戶因某些原因錯過多日簽到，管理員也能透過後台直接新增缺失日的 UserSignInStats 紀錄來補發相應獎勵（例如酌情發放點數），並將此操作記錄在歷程以資註明。所有後台對簽到資料的干預都必須慎重，並同步影響相關的累計獎勵狀態，確保用戶後續簽到的連續計算正確。

使用流程（每日簽到）：

執行簽到：早上，小明登入平台後，導航到「每日簽到」區域並點擊簽到按鈕。前端立即呼叫 POST /api/signin API 向後端發出簽到請求。

後端檢查：後端收到請求，首先依據小明的 UserID 查詢當天是否已有簽到記錄（例如執行 SELECT * FROM UserSignInStats WHERE UserID = 小明ID AND SignTime >= 今天0點）。若發現已有紀錄，後端立刻回傳錯誤狀態，前端則彈出訊息「今日已簽到」，流程終止。若沒有紀錄，則表示可以簽到，後端進入下一步計算獎勵。

計算獎勵：系統根據小明的情況計算此次簽到獎勵。預設情況下，小明可獲得 PointsGained = 20 點，如果他的帳號已有綁定寵物，則額外 ExpGained = 10（讓寵物獲得 10 點經驗）；再檢查小明是否已連續簽到多日。假設今天是他連續簽到的第7天，系統會在上述基本獎勵之外，額外增加 +100 點以及設定 CouponGained 為一張85折優惠券的代碼。這些獎勵值和代碼會暫存於計算結果中。

資料庫更新：後端開啟資料庫交易，執行一系列更新：

在 UserSignInStats 新增一筆簽到記錄：內容包括 SignTime=此刻時間、PointsGained=20（或120，含連續獎勵）、ExpGained=10、CouponGained=「PROMO15」（假設85折券代碼）等。

更新 User_Wallet：將小明的 User_Point 增加對應的點數（假如共+120點）。

更新 Pet：如果 ExpGained > 0，則找到小明的寵物資料，累加 Experience 值 10 點。檢查累積經驗是否超過升級所需，如是則寵物升級（Level += 1），並重置經驗或扣除升級所需部分，同時寵物的 LevelUpTime 設為現在，並因升級獲得對應獎勵點數（該點數也會順帶加入 User_Wallet 和 WalletHistory）。

如果有 Coupon 獎勵，則在 Coupon 資料表為小明插入一筆新優惠券記錄，CouponCode 為事先計算的券碼「PROMO15」、CouponTypeID 對應85折券類型、UserID 為小明、IsUsed=0、AcquiredTime=現在。

在 WalletHistory 插入一筆紀錄，記錄此次簽到導致的點數變動：ChangeType="Point", PointsChanged=+120, Description="每日簽到獲得+120點", ChangeTime=現在。
所有操作成功後提交 Transaction，確保資料一致。

結果返回：交易提交後，後端返回簽到成功的結果給前端。前端隨即更新UI：顯示「簽到成功！獲得120點積分，寵物經驗+10」的提示字樣，同時會員錢包餘額增加、寵物資訊更新，新的優惠券出現在小明的錢包券列表中。

後續操作：由於小明已經連續簽到滿7天，他獲得的優惠券和額外點數獎勵將在下次簽到計算時重置連續天數（或按規則重新計算）。隔天，小明若繼續簽到，系統會重新從1開始計算連續天數，或按照設計規則進入下一個週期的累積計算。

整個每日簽到流程中，系統將執行過程的重要資訊以通知形式告知用戶：例如當小明獲得優惠券時，除了畫面提示，通知中心也會收到一則「你已獲得優惠券：85折優惠券」的站內通知。此模組的實施有效提升了每日用戶訪問率，透過漸進式的獎勵使用戶樂於天天簽到，形成習慣。

寵物養成系統

功能描述：寵物系統讓會員可以飼養並培育一隻虛擬寵物（目前實裝的是可愛的「史萊姆」寵物）。每個會員最多擁有一隻專屬寵物。寵物具有五項基本屬性：飢餓 (Hunger)、心情 (Mood)、體力 (Stamina)、清潔 (Cleanliness)、健康 (Health)，所有屬性值範圍介於 0 至 100 之間。寵物同時具備等級 (Level) 和經驗值 (Experience)，等級提升可以解鎖新功能或稱號，經驗值則通過參與互動和遊戲累積。寵物系統的核心資料表為 Pet 表。每筆 Pet 表記錄對應一隻寵物，欄位包括 PetID（寵物ID，自增主鍵）、UserID（寵物所屬會員ID）、PetName（寵物暱稱）、Level（當前等級）、LevelUpTime（最後升級時間）、Experience（累計經驗值），以及五維屬性 Hunger, Mood, Stamina, Cleanliness, Health。此外還有寵物的外觀欄位，如 SkinColor（膚色，以HEX色碼表示）、SkinColorChangedTime（最後更換膚色的時間）、BackgroundColor（背景主題顏色或名稱）、BackgroundColorChangedTime（最後更換背景的時間）等。Pet 表也紀錄了最近一次升級獲得的點數獎勵 (PointsGained_LevelUp) 以及最近一次換膚/換背景花費的點數 (PointsChanged_SkinColor、PointsChanged_BackgroundColor)。

等級與經驗機制：寵物升級所需經驗值可以根據等級成長公式 L(n) 定義，例如每升一級所需經驗呈線性或指數增長。當 Pet.Experience 累積達到目前等級的門檻值時，寵物等級 Level 自動 +1，經驗值歸零或扣除門檻值後的剩餘部分繼續累積。升級時系統更新 Pet.LevelUpTime 為當前時間，並可選擇性地給與會員一些獎勵，如點數獎勵或屬性提升。例如設計為每升級寵物都會讓主人獲得 50 會員點數，此時 PointsGained_LevelUp 欄位會記錄50，且系統會透過 WalletHistory 增加「寵物升級獲得+50點」的紀錄。寵物升級可能同時提升寵物的屬性上限或回復部分屬性值，具體規則可由系統調整。

五維屬性的影響：寵物的 Hunger、Mood、Stamina、Cleanliness、Health 會隨時間推移或使用者互動而改變。平台預設會有自動衰減機制，例如每隔24小時寵物的飢餓值 +5（表示更餓了）、心情值 -3（長期未互動導致心情下降）等。同時，在用戶與寵物進行互動或參與小遊戲時，這些屬性也會即時變化（詳見下述互動與小遊戲部分）。屬性值有上下限約束：任何屬性不可低於0或高於100，當計算結果超出範圍時，後端需強制將其調整回邊界值。例如某屬性計算得出 -5 則設為 0，超出 100 則設為 100。如果某些屬性長期處於極端值（如飢餓=100表示非常餓），系統可以設定特殊懲罰或狀態，如寵物健康值下降甚至生病。當 Health 下降為 0（可能代表寵物因過度飢餓或生病而「虛弱」），可以限制用戶某些行為（例如禁止開始小遊戲直到寵物恢復健康）。這些規則的目的在於鼓勵用戶定期照顧寵物，例如餵食、洗澡、陪伴以維持其各項狀態。

換膚色與背景：寵物外觀可由用戶自定義，包括更換寵物膚色（顏色）和背景主題。更換膚色屬於付費項目，用戶需要支付一定會員點數才可解鎖新的顏色。平台預設更換一次膚色需花費 2000 點會員積分。當用戶在前端選擇一種新顏色提交更換請求時，後端首先檢查他錢包點數是否>=2000。如足夠則扣除點數，將 Pet.SkinColor 更新為新顏色代碼，並寫入 Pet.SkinColorChangedTime 為當前時間，同時 Pet.PointsChanged_SkinColor 記錄此次扣除點數數額（2000）。User_Wallet 錢包餘額相應減少，WalletHistory 亦新增「購買寵物膚色-2000點」的記錄。背景主題預設可以免費更換多種顏色或圖案，小明可以在前端介面任意挑選預設背景並套用。每次換背景會更新 Pet.BackgroundColor 及 BackgroundColorChangedTime，但 PointsChanged_BackgroundColor 預設為0不扣點。然而，若未來推出特別背景（例如限量主題）需點數購買，則可在配置中將其標記需要扣點，系統在更換時會執行與換膚類似的扣點流程。

寵物狀態事件：當寵物的某些屬性達到臨界值時，系統可以觸發特殊事件或提醒。例如如果 Hunger 一直100（極度飢餓）達一段時間，系統可以判定寵物「餓昏了」——健康度會開始下降且暫時無法參與小遊戲，並向用戶發送通知提醒「您的寵物太餓了，快去餵食！」。又如清潔值長期為0，寵物可能「生病」，健康值下降並顯示骯髒狀態，直到用戶在互動中執行洗澡操作使 Cleanliness 回升。這些狀態改變會寫入寵物日誌供管理員日後查詢。

前端介面：在會員的個人主頁或專門的寵物頁面，系統以視覺化方式展示寵物資訊。具體包含：寵物的名稱（可由用戶編輯）、等級和經驗進度條（例如顯示「Lv.3（120/300 XP）」）、以及五維屬性的進度條或百分比圓環。當前屬性值接近0或100時可能以顏色提示（例如過低時顯示紅色警告）。介面上提供多個互動按鈕：如「餵食」、「玩耍」、「洗澡」、「哄睡」等。用戶點擊這些按鈕即可對寵物執行對應操作。比如點擊「餵食」，前端會呼叫後端 API 增加寵物飢餓值和心情值；按「洗澡」則提高 Cleanliness 清潔值；「玩耍」可以提升 Mood 但也許減少 Stamina，視規則設定而定。當寵物處於某些特殊狀態時，一些按鈕可能不可用（如 Health=0 時禁用「玩耍」按鈕）以避免加重寵物負荷。此外，介面上也提供「換膚色」和「換背景」的選項卡或按鈕。點擊換膚色會彈出顏色選擇器，列出一系列可購買的顏色方塊及所需點數；用戶選定顏色並確認後，即扣點並改變寵物顏色（流程如前述）。背景更換類似，但如果是免費背景則不扣點，立即套用。前端在換膚或換背景時應提供預覽效果，例如滑過某顏色即時在寵物圖示上顯示該顏色效果，提升使用體驗。

後端邏輯：寵物各項操作對應的後端實現如下：

餵食 / 玩耍 / 互動：Controller 接收到如 /api/pet/feed 或 /api/pet/play 之類的請求時，會呼叫 PetInteractionService。該服務按定義的增量修改 Pet 表對應寵物的 Hunger、Mood 等屬性值。例如餵食可能執行 Hunger += 20、Mood += 10，但上限封頂100；如果因為餵食使 Hunger 到100，系統可進一步將 Health 微增表示健康改善。互動完成後將最新屬性值保存回資料庫，返回更新後的寵物狀態給前端。若該次互動導致寵物達到某些事件（例如 Hunger 首次回到0），後端可在返回時攜帶一個事件標誌，前端據此彈出提示如「寵物吃飽了，開心地蹭了你一下」。

寵物成長：當會員完成小遊戲後，對應的 MiniGame 記錄中會有 ExpGained 欄位累積了寵物此次獲得的經驗。系統在保存 MiniGame 結果時，同步執行 Pet.Experience += 該 ExpGained。然後檢查 Pet.Experience 是否超過當前等級的升級所需值。如果超過，則呼叫 PetLevelService 執行升級流程：提升 Pet.Level 值並將 Experience 扣減升級門檻值後的剩餘經驗（或歸零），更新 Pet.LevelUpTime，同時計算會員獲得的點數獎勵（若有）並增加到會員錢包。例如寵物升至5級獎勵主人100點，則User_Wallet加100，WalletHistory記錄「寵物升級獎勵+100點」。這些操作在一個事務中完成，以確保寵物等級與經驗、主人點數更新統一成功或失敗。

屬性重置：為模擬現實，平台可能設有後台排程（Background Service），每日淩晨執行一次全局寵物狀態更新。例如每天00:00對所有 Pet 資料進行更新：Hunger = LEAST(Hunger + 5, 100)（飢餓感上升但不超100）、Mood = GREATEST(Mood - 3, 0)（心情下降但不低於0）、體力 Stamina 可能自然恢復一些等。這種批次處理將使長時間未登入的用戶，其寵物狀態逐漸惡化，需要用戶回來照料。實作上可以透過 SQL 作業或每隻寵物執行程式計算，更新時注意加鎖避免跟即時互動衝突。更新後若某些寵物屬性觸發關鍵事件（如Health降為0），系統可透過通知系統發送提醒給其主人。

錯誤校驗：所有寵物相關的API在執行前都要檢查關鍵條件。例如執行 /api/pet/play 前，後端需驗證該會員擁有一隻寵物（Pet表有紀錄且UserID對應）；如果會員尚未創建寵物（也許未完成某任務解鎖寵物），則返回錯誤指出「尚無寵物，無法進行互動」。再如開始小遊戲前，要驗證寵物 Health > 0 且五維屬性中沒有任何一項為 0（比如飢餓值不為0），否則返回錯誤代碼 PET002 表示「寵物狀態不佳，無法開始遊戲」。換膚色/背景操作則需檢查輸入的色碼或背景識別碼是否合法（在允許選擇範圍內），以及會員點數是否足夠支付。任何不符條件的請求都會被即時拒絕並回傳對應錯誤訊息。

使用流程（寵物互動與養成）：
小明的寵物「史萊姆」是他每天登入遊戲論壇平台後一定會關心的對象。進入會員中心，小明首先檢視他的寵物狀態：飢餓 80%、心情 40%、體力 90%、清潔 60%、健康 85%。由於心情值偏低，小明決定與寵物互動一下來提升它的心情。他點擊了「陪玩」按鈕，寵物的心情值立即上升了一些（例如從40%升到55%），同時體力可能略減來模擬寵物有點累了。接著，他看到飢餓值也挺高，於是點擊「餵食」。這次寵物開心地吃掉虛擬飼料，飢餓值從80%降至50%（越低表示越不餓），心情值也同步提高到70%。清潔值沒有改變，不過系統提示「寵物吃得滿嘴是醬，需要洗澡了！」。小明點擊「洗澡」，清潔值回升到90%，寵物在螢幕上呈現出乾淨閃亮的模樣。此時健康值保持85%，但因為飢餓已緩解且心情變好，寵物健康未受到進一步影響。

一連串互動下來，小明的寵物屬性變化即時反映在介面上，每次操作後都有可愛的動畫：餵食時史萊姆露出滿足的笑容並發出「嗝～」的音效，洗澡時出現泡泡效果並伴隨水流聲。這些都增強了小明與寵物互動的樂趣，也鼓勵他每天都花點時間照料寵物。

當天晚些時候，小明帶著史萊姆去參加了一場小遊戲冒險。在冒險勝利後，他獲得了 50 點會員點數獎勵，史萊姆也得到 20 點經驗。系統通知他「寵物經驗+20」，並在寵物介面上將經驗條向前推進了20點。史萊姆目前等級為 3，升到 4 級還差 80 點經驗。小明期待著再多玩幾次遊戲讓寵物升級。隔天，他登入時發現史萊姆的飢餓值略有上升（過了一夜，從50%變成60%），心情值下降了一些（從70%降到65%），這提醒他需要定期與寵物互動。

在一次升級後（史萊姆升到4級），系統彈出祝賀訊息「恭喜！史萊姆升到 Lv.4，您獲得獎勵：+50 點會員積分！」。小明的錢包點數隨之增加，也對繼續培養寵物更有動力了。某天，小明決定給史萊姆換個顏色試試。他打開「換膚色」面板，看到有多種顏色選擇，每種需要2000點。他餘額足夠，於是選擇了一個酷炫的紅色並點擊確認。系統扣除了他2000點，史萊姆立刻變成紅色，看起來煥然一新。錢包歷史新增了「購買寵物膚色 -2000點」的紀錄。朋友們在論壇上看到他的寵物截圖，都誇這紅色很帥氣，小明覺得2000點花得很值得。

現在，小明每天都花幾分鐘關注史萊姆的狀態。他深知若長期不理會寵物，史萊姆可能會餓肚子、生病，甚至影響自己玩遊戲的進度。幸好平台有貼心的提醒機制：有一次小明出差忘了登入兩天，系統在第二天透過Email通知他「您的寵物很想您！目前飢餓100，心情0，快回來照料吧」。小明立刻登入，費了點力氣才把屬性都恢復上來，暗暗決定以後不要冷落史萊姆。寵物系統以這種方式成功地讓用戶與平台產生情感連結，史萊姆對小明而言彷彿成了遊戲世界中的夥伴，陪伴著他的日常。

小遊戲系統

功能描述：小遊戲系統提供會員與其寵物進行冒險挑戰的娛樂功能。目前實作的是一款結合寵物養成元素的小型冒險遊戲。玩家可以帶著自己的寵物參與戰鬥，每日最多進行 3 次遊戲。每次遊戲挑戰都會產生一筆遊戲記錄儲存於 MiniGame 資料表。MiniGame 表欄位包括：PlayID（遊戲記錄ID，主鍵，自增）、UserID（玩家會員ID）、PetID（出戰寵物ID）、Level（關卡等級）、MonsterCount（怪物數量）、SpeedMultiplier（怪物速度倍率）、Result（結果，可能值："Win"勝利、"Lose"失敗、"Abort"中途放棄）、ExpGained（寵物獲得的經驗值）、PointsGained（玩家獲得的會員點數）、CouponGained（若通關額外贈送的優惠券代碼，否則為 "0"）、HungerDelta/MoodDelta/StaminaDelta/CleanlinessDelta（遊戲過程對寵物各屬性造成的變化量，可正可負）、StartTime（遊戲開始時間）、EndTime（遊戲結束時間，若中途放棄則為 NULL）、Aborted（是否中途放棄，布林值）。這些資料允許系統在賽後更新寵物狀態，以及為用戶提供遊戲歷史查詢的依據。

遊戲規則：小遊戲的內容可以是回合制戰鬥，也可以是簡單的動作躲避類遊戲。系統預設了多個關卡 Level，每個關卡對應不同的怪物數量 (MonsterCount) 和怪物速度 (SpeedMultiplier)。通常 Level 越高，怪物越多且越快，難度越大。玩家進入遊戲前需從可用關卡中選擇一個（或系統根據玩家等級推薦）。遊戲開始後，玩家控制寵物與怪物戰鬥：具體戰鬥細節視遊戲設計而定，假設為一個寵物對若干怪物的關卡。當遊戲結束時會有三種可能結果：勝利 (Win)、失敗 (Lose) 或中途放棄 (Abort)。若玩家在遊戲進行中途強制退出（關閉頁面或按下放棄鍵），系統記錄 Result="Abort"，EndTime 保持 NULL，並將 Aborted 標誌設為 1。勝利或失敗則 EndTime 記錄完成時間，Aborted=0。

結果結算：遊戲結束後，後端依據結果計算本局遊戲獎勵：

如果勝利 (Win)：玩家將獲得豐厚的獎勵。舉例而言，會員點數獎勵 PointsGained 可按照公式 basePoint * Level * MonsterCount * SpeedMultiplier 計算。假設 basePoint=10，若玩家在 Level 2 關卡對戰 5 隻怪物 (MonsterCount=5) 且速度倍率1.2，則點數獎勵 = 10 * 2 * 5 * 1.2 = 120 點。同時寵物獲得 ExpGained 經驗值，可按 baseExp * Level 計算，例如 baseExp=5，Level 2 即獲得 10 點經驗。此外系統會檢查是否觸發額外獎勵條件，例如活動期間首次通關獎勵、隱藏關卡獎勵等。如果達成條件，CouponGained 欄位將填入對應的優惠券代碼並記錄優惠券發放。例如玩家首次通關最終關卡，系統額外給他一張滿額折扣券，CouponGained="CLEAR2025"並在 Coupon 表增加一筆記錄給該玩家。

如果失敗 (Lose)：玩家可能只獲得少量獎勵甚至沒有獎勵。例如可以設定失敗仍獲得少許寵物經驗 ExpGained=5 或會員點數 PointsGained=0（表示沒有點數獎勵）。若遊戲設計允許，也可給予一些安慰獎如極低概率掉落道具，但若無任何獎勵則 MiniGame 記錄中的 PointsGained 和 ExpGained 保持預設的0值不變。

如果放棄 (Abort)：通常不給予任何獎勵。MiniGame 記錄中PointsGained=0、ExpGained=0且 Aborted=1 表示該局無效。為防止玩家透過頻繁放棄反覆刷簡易關卡以謀取某些好處，可以在後台統計 Aborted 次數過高的用戶予以警告或限制。

屬性變化：每局遊戲結束後，寵物的狀態屬性會根據遊戲歷程進行調整。MiniGame 記錄中的 HungerDelta、MoodDelta、StaminaDelta、CleanlinessDelta 正是統計寵物在遊戲過程中屬性的淨變化。例如，在戰鬥過程中寵物可能因戰鬥消耗體力 -30（StaminaDelta=-30）、受到驚嚇心情 -10（MoodDelta=-10）、弄髒自己清潔 -20（CleanlinessDelta=-20），但打敗怪物後心情大振 +15（已合併在淨變化中）。這些累積影響會在遊戲結束時一次性套用到寵物身上。後端在更新 MiniGame 記錄之後，會依次更新 Pet 表：執行 Pet.Hunger += HungerDelta、Pet.Mood += MoodDelta 等。像所有屬性更新一樣，需限定結果在0~100範圍內。接著，針對 MiniGame 記錄中的獎勵部分：

如果 PointsGained > 0，則增加玩家對應的 User_Wallet 點數餘額並寫入 WalletHistory（例如「小遊戲勝利獲得+100點」）。

如果 ExpGained > 0，則增加寵物的 Pet.Experience 並檢查升級邏輯（類似前述寵物系統等級處理）。

如果 CouponGained 有值（例如 "CLEAR2025"），則新增優惠券紀錄到 Coupon 表中給玩家。

以上更新過程通常與遊戲結果保存在同一個伺服器請求中完成，但可以拆分為兩步：遊戲開始API 及遊戲結束API。

API 設計：小遊戲系統常見的 API 有：

開始遊戲：例如 POST /api/game/start，前端在玩家點擊「開始冒險」按鈕時調用。後端執行動作包括：驗證玩家是否有可用挑戰次數（每日限制3次）；驗證玩家選擇的關卡是否有效（Level 是否在允許範圍）；驗證玩家所選寵物狀態是否適合開始遊戲（Health > 0 及關鍵屬性不為0）。通過驗證後，在資料庫 MiniGame 表預先插入一筆新紀錄，填入 UserID、PetID、StartTime 等基本資訊。同時將本局所需的遊戲參數（Level 對應的怪物配置等）返回給前端，以便前端載入遊戲場景。若驗證不通過，例如玩家已達當日3次上限，則返回錯誤碼 GAME001，前端彈出「您今天已經玩了3次，請明天再來」提示。

結束遊戲：例如 POST /api/game/end，在前端判定遊戲結束（勝利或失敗或玩家放棄）時呼叫。Request 會攜帶遊戲過程中累計的關鍵數據（如怪物擊殺數、用時等）和結果狀態。後端收到後，先從資料庫找出對應的未完成 MiniGame 記錄（可依據先前 start API 返回的 PlayID）。然後後端重新驗證關鍵參數防止作弊：例如確保提交的 Level 符合該 PlayID 原先 start 時設定，MonsterCount 和 SpeedMultiplier 沒被竄改，避免用戶試圖偽造高獎勵參數。驗證通過則根據提交的戰鬥表現計算最終 Result、PointsGained、ExpGained 等獎勵，更新這筆 MiniGame 記錄完整資訊。隨後按上述規則更新寵物狀態、會員點數、發放券等。若發現客戶端參數有異常（可能作弊），後端可以直接將 Result 設為 Lose 或 Abort，或者完全拒絕此次結果提交。最後，回傳遊戲結果給前端，包括獲得的點數、經驗以及寵物屬性變化，以便前端顯示給玩家。

查詢遊戲歷史：例如 GET /api/game/records，用於前端「我的遊戲紀錄」頁面載入數據。後端會查詢 MiniGame 表篩選當前用戶最近的遊戲記錄，可能需要JOIN Game表以取得關卡名稱等。由於 MiniGame 表可能資料量較大，查詢使用 (UserID, StartTime) 索引排序後分頁返回。前端將每場紀錄顯示為列表，內容包含日期時間、挑戰關卡、結果（贏/輸/中止）以及獲得的獎勵摘要。

前端UI/UX：小遊戲的前端以 Canvas 等技術呈現遊戲畫面。為了提高趣味性，遊戲場景中寵物與怪物都有簡單動畫效果，碰撞和攻擊有即時反應。例如寵物攻擊時向前衝的動畫，怪物被擊敗時淡出消失等。由於使用 Canvas/WebGL，前端在遊戲迴圈中使用 requestAnimationFrame 進行渲染，確保以瀏覽器最佳頻率刷新畫面，避免掉幀或延遲。開發中也特別注意效能：使用精靈圖 (sprites) 管理動畫、儘量減少不必要的 DOM 操作、將靜態元素繪製在背景層等。遊戲包含音效與背景音樂，前端在適當時機播放，例如寵物攻擊時播放“啪”的音效，勝利時播放歡呼聲。在遊戲 UI 上，同時顯示寵物當前的關鍵狀態（可以是一組小圖示，如心情笑臉、飢餓麵包圖示等，隨屬性變化閃爍提醒），讓玩家了解寵物狀態對戰鬥的影響。遊戲結束畫面會根據勝負展示不同的視覺效果：勝利時螢幕出現「Victory!」字樣和禮花動畫，失敗時顯示「Defeated」灰暗效果。獎勵結算則以數字跳動的方式呈現，如「+100 積分」從寵物頭頂冒出後消失，以強調獲取的獎勵。

使用流程（小遊戲冒險）：
在完成每日簽到和日常論壇瀏覽後，小明準備挑戰今天的小遊戲冒險。他打開「小遊戲」介面，選擇了第二關（Level 2）的冒險並點擊「開始挑戰」按鈕。系統提示他今天已玩了 1 次，剩餘挑戰次數為 2 次。小明確認開始，此時前端載入遊戲畫面：史萊姆進入一座叢林場景，四周逐漸刷出5隻小怪物。遊戲正式開始，小明透過鍵盤操控寵物移動並攻擊。他靈活地讓史萊姆閃避怪物的衝撞，同時抓住時機反擊。隨著一隻隻怪物被消滅，史萊姆的體力也在慢慢下降（體力條在畫面角落顯示）。終於，小明成功擊敗最後一隻怪物，螢幕上跳出「Victory!」的字樣和勝利音效。

此時前端向後端發送 /api/game/end 請求，附帶這局遊戲的結果（Win）、用時、擊敗怪物數等資料。後端很快返回結算結果：顯示小明獲得 120 點會員積分、寵物 +10 點經驗，並驚喜地額外掉落了一張優惠券。前端在結算畫面上動畫地展示「+120 積分」「+10 寵物經驗」「獲得優惠券：ATTACK50」（假設50元折扣券碼）。小明欣喜地點擊繼續，遊戲結束畫面關閉，回到小遊戲主界面。此時他的挑戰次數顯示剩餘1次。史萊姆因連續戰鬥有些疲憊，前端在寵物狀態欄上看到體力值明顯下降。小明決定讓史萊姆休息一會兒再進行最後一次挑戰。

幾分鐘後，他再次點擊開始，進行了今天的第三次冒險挑戰。不幸這次遇到了強大的Boss，小明最終沒能擊敗對手，螢幕顯示「Defeated」，伴隨著一聲嘆息的音效。後端結算Result="Lose"，小明僅獲得了 20 點積分作為參與獎，而寵物經驗值沒有增加。前端告知了這個結果，小明也不氣餒，決定明天調整策略再戰。

當天的遊戲結束後，小明打開「遊戲紀錄」頁面，看到當日的三條紀錄都已經列出：兩勝一敗，每條都註明了關卡等級、結果、積分和經驗收獲。第一條記錄還標示出獲得了一張優惠券。小明點擊該優惠券代碼「ATTACK50」，前端自動將該券加入他的錢包優惠券列表，方便他稍後在商城結帳時使用。

在整個過程中，系統也在後台監控著遊戲行為：由於小明正常遊玩並未嘗試作弊，所有數據都合乎邏輯，因此沒有觸發任何警報。若某位用戶短時間內大量重複玩、頻繁中途退出，系統管理員會在後台遊戲報表中看出異常並調查原因。例如若發現有人企圖修改客戶端參數獲取不合理高分，後端返回的獎勵將被自動調整甚至清零。這些措施確保了遊戲的公平性。

小明對小遊戲系統相當滿意。每日本來單調的簽到和逛論壇行為，因為有了寵物與小遊戲的融入變得豐富起來。他享受著帶著史萊姆闖關的樂趣，還能因此拿到會員積分和優惠券，進一步激勵他在商城消費。小遊戲成為他每日行程的一部分，也讓平台成功增加了用戶黏著度。

優惠券與禮券系統

功能描述：優惠券與禮券系統管理平台上的虛擬票券資產，包括官方商城專用的折扣券（Coupon）以及可折抵現金或兌換實體商品的電子禮券（E-voucher）。透過此系統，會員可以使用累積的點數來兌換各種優惠券/禮券，並在購物或其他場合使用這些券享受優惠。優惠券通常由平台發行，用於官方商城的折扣，例如免運費券、滿額折扣券、百分比折扣券等；禮券則可被視為現金等值券或兌換券，如「500元購物禮券」或「遊戲周邊兌換券」等，會員可持禮券至合作實體店或線上商店兌換指定商品或金額。

資料結構：優惠券部分由兩張表組成：CouponType 與 Coupon。CouponType 定義了各類優惠券的靜態資訊，包括 Name（名稱，如「滿額折抵100」）、DiscountType（折扣類型，"Amount" 表固定金額折抵，"Percent" 表百分比折扣）、DiscountValue（折扣值，如 100.00 表示折抵100元，或 0.15 表示85折）、MinSpend（使用門檻金額，例如 1000 表示滿1000元可用，0 表示無門檻）、ValidFrom/ValidTo（券有效起迄時間）、PointsCost（會員以點數兌換此券所需的點數成本，如500點）、Description（描述欄位，說明適用範圍等）。CouponTypeID 為主鍵，自增。Coupon 表則記錄每張發給會員的實際優惠券，欄位包括 CouponID（主鍵）、CouponCode（優惠券代碼，字串，通常由大寫字母和數字組成且全域唯一）、CouponTypeID（券類型外鍵）、UserID（持有者會員ID）、IsUsed（是否已使用，布林值）、AcquiredTime（獲得時間）、UsedTime（實際使用時間，若已使用則填寫）以及 UsedInOrderID（使用此券的訂單編號，僅參考，不強制關聯訂單表）。Coupon 表上建立了索引 (UserID, IsUsed, CouponID)，方便查詢某會員的可用/已用優惠券清單並按獲得順序排序。

禮券部分也有兩張表：EVoucherType 與 EVoucher。EVoucherType 定義禮券類型資訊，包括 Name（名稱，如「500元現金券」、「周邊T恤兌換券」）、ValueAmount（面額或兌換價值，如500.00表示可抵500元）、ValidFrom/ValidTo（有效期起迄）、PointsCost（兌換所需點數成本）、TotalAvailable（總發行量上限，用於有限庫存的禮券）、Description（描述，可註明適用商品或條件）。EVoucherTypeID 為主鍵。EVoucher 表則記錄每一張實際發放的電子禮券，欄位包括 EVoucherID（主鍵）、EVoucherCode（禮券代碼，通常長度較長，可轉換為條碼或QR碼掃描使用，需唯一）、EVoucherTypeID（禮券類型外鍵）、UserID（持有者會員ID）、IsUsed（是否已核銷/使用，布林值）、AcquiredTime（取得時間）、UsedTime（核銷時間，若已使用則填）。EVoucher 表的索引 (UserID, IsUsed, EVoucherID) 用於加速查詢會員的禮券列表。

此外，為支援禮券的實體店即時核銷，系統設計了 EVoucherToken 表和 EVoucherRedeemLog 表。EVoucherToken 用於產生一次性使用的核銷憑證（Token）。其欄位有 TokenID（主鍵）、EVoucherID（關聯的禮券ID）、Token（隨機生成的一次性Token字串，64字符，唯一）、ExpiresAt（過期時間，通常幾分鐘到幾十分鐘內有效）、IsRevoked（是否已撤銷作廢）。每當使用者準備使用禮券時，系統可以生成一筆 EVoucherToken 作為該次核銷的憑證，例如轉換成QR Code讓店員掃描。Token 一經使用或過期即作廢，避免重複使用同一禮券。EVoucherRedeemLog 則記錄每一次禮券核銷嘗試（不論成功或失敗）的日誌：欄位有 RedeemID（主鍵）、EVoucherID（禮券ID）、TokenID（使用的Token ID，可為NULL表示人工輸入券碼方式）、UserID（執行核銷的會員，一般應等於券持有人ID）、ScannedAt（掃描/提交核銷請求的時間）、Status（核銷結果狀態，如 "Approved" 已成功核銷、"Rejected" 拒絕/驗證失敗、"Expired" Token過期、"AlreadyUsed" 券已使用過、"Revoked" Token已撤銷）。RedeemLog 上設置索引 (EVoucherID, ScannedAt) 方便查詢特定禮券的所有使用嘗試紀錄，以及索引 (UserID, ScannedAt) 方便追蹤某會員的禮券使用歷史。

兌換規則：會員可以在其錢包介面中選擇可用的優惠券或禮券類型並進行點數兌換。兌換流程要求會員擁有足夠的積分 (User_Point >= 該券 PointsCost)。當用戶確認兌換某一種券時，後端將在事務中完成以下動作：(1) 扣減會員對應點數；(2) 在 Coupon 或 EVoucher 表中新增一筆對應的券記錄指派給該會員；(3) 在 WalletHistory 表記錄此次扣點行為。例如，會員甲花費500點兌換一張85折優惠券：後端扣除其 User_Wallet.User_Point 500點，然後查找 CouponType 對應85折的類型（DiscountType="Percent", DiscountValue=0.15），生成一個唯一券碼如 "DISC15XXXXX"，插入 Coupon 表新紀錄（UserID=甲、CouponCode="DISC15XXXXX"、CouponTypeID=對應ID、IsUsed=0、AcquiredTime=現在），最後寫 WalletHistory 一筆記錄「兌換85折優惠券 -500」。完成後將券碼返回給前端顯示，並在會員的錢包「我的優惠券」列表中出現這張新券。

使用規則（優惠券）：優惠券只能由其持有人本人在官方商城下單時使用，不能轉讓給其他會員。使用優惠券時，用戶需要在商城結帳頁面輸入或選擇券碼。前端提交訂單時會一併將券碼發送至後端，後端在 Order 資料建立前驗證該券是否有效：

檢查券碼是否存在於 Coupon 表中，且屬於該用戶 (UserID 匹配)。

檢查當前日期是否在該券的有效期內 (ValidFrom <= 今天 <= ValidTo)。

檢查券的 IsUsed 狀態必須為未使用 (0)。

如有設定使用門檻 (MinSpend)，則檢查該筆訂單總額是否達到門檻。
如任一條件不符，後端將拒絕套用並返回訊息（例如「無效的優惠券」「優惠券已過期」「未達使用門檻」等）。若全部驗證通過，後端即計算折扣金額：對於 DiscountType="Percent" 的券，以訂單商品總額乘以 DiscountValue 得出折抵額；對於 DiscountType="Amount" 的券，直接扣減固定金額，但要確保扣減後訂單金額不為負。計算完成後，訂單 OrderInfo 中的 order_total 更新為折扣後金額，並將 Coupon 記錄的 IsUsed 設為1，UsedTime 填入使用時間，UsedInOrderID 關聯上該訂單編號。此時該券即視為已使用，不能再次使用。如果用戶取消訂單或訂單未完成付款流程，系統不會自動將券返還，但管理員可視情況在後台將該券的 IsUsed 手動重置為0（或發行新券補償）。

使用規則（電子禮券）：電子禮券一般情況下不在線上商城使用，而是供線下實體店或特定合作平台核銷。例如一張「500元現金券」，用戶可到合作的遊戲門市使用，店員透過掃描券上的 QR Code 進行核銷。核銷時，系統流程如下：掃描端（可能是商家App或平台後台）讀取用戶出示的 EVoucherCode 或對應的一次性 EVoucherToken。後端接收核銷請求後，根據提交的碼值在資料庫中查找對應的未使用 EVoucher 記錄。若使用一次性Token流程，則驗證 EVoucherToken 是否存在且未過期、未撤銷。一旦確認有效，後端將 EVoucher 的 IsUsed 設為1並填寫 UsedTime，同時在 EVoucherRedeemLog 新增一筆記錄，標記此次核銷動作為 Approved。如果驗證不通過，例如 Token 已過期或券已被用過，則 RedeemLog 記錄為 Rejected/Expired 等相應狀態，並拒絕本次使用請求。成功核銷後，使用者無法再次使用該禮券，前端（如商家收銀App）會收到確認，店員即可為持券人提供500元折抵或兌換對應商品。在整個過程中，系統特別注意安全：EVoucherToken 的生成使用高強度隨機算法或雜湊，以防止惡意猜測；Token 設置極短的有效期（比如5分鐘）且一經使用或撤銷即失效，杜絕「一券多人使用」的漏洞。另外，管理員在後台可以手動將某張禮券的 Token 列入黑名單（IsRevoked=1），例如發現某用戶報失其禮券碼或出現欺詐嫌疑時。這會導致即使該券的Token被他人掃描也會被拒絕核銷。

使用限制與資料保存：無論優惠券或禮券，一經發放原則上不可刪除。即使過期或已使用，這些紀錄仍保留在資料庫中，以便日後查閱和稽核。管理員可以在後台將過期券刪除僅僅是邏輯上的（例如設置某狀態標記），但不應直接從資料庫移除記錄。在使用過程中，除了後端的驗證，前端也會做基本格式檢查：如券碼輸入欄會檢查是否為大寫英數組合、長度是否正確；當用戶點擊「兌換」按鈕時，如果他當前點數不足以支付該券 PointsCost，前端會即時顯示「點數餘額不足」並阻止提交請求。這些措施減少無效請求進入後端，提升使用體驗和系統效能。

折扣計算：對於百分比折扣券，當折扣套用時要注意數值處理精度，避免浮點誤差導致一分錢問題。系統可規定將折扣金額四捨五入到最接近的整數或0.1單位，再從訂單扣除。對於滿額折抵券，如果訂單金額剛好等於門檻或超過門檻都可使用；但若訂單金額低於門檻，則應在用戶輸入券碼時即提示「未達使用門檻」。一張優惠券通常只能對應一張訂單使用，不支持疊加多張券於同一訂單（除非是不同類型如滿額券+免運券並行，視營運規則決定）。系統在OrderInfo結帳時會限制每個order最多應用一張券，以免重複折扣。

前端介面：會員在「我的優惠券」頁面可以切換查看「可使用」與「已使用/過期」兩類券。每張券以卡片形式展示，包括券碼、折扣內容（例如「滿1000減100」或「15% OFF」）、有效期限，以及一個「使用說明」按鈕。點擊使用說明可彈窗顯示該券的詳細描述和限制條款，如適用商品類別、有無最低消費、是否可與其他優惠同用等。在商城的購物車/結帳頁面，也會提供一個下拉選單或輸入框讓用戶選擇自己擁有的優惠券進行折抵。至於禮券，介面上通常不會提供線上「使用」功能，而是顯示一個可出示的條碼或 QR Code 圖像。會員點擊某張禮券的「顯示條碼」按鈕時，前端會請求後端生成 EVoucherToken，並將對應的條碼顯示在畫面上給店員掃描。條碼旁也會顯示禮券名稱、面額及有效期等資訊，提示用戶使用期限。若Token有效期極短（例如1分鐘），前端應顯示倒數計時並在到期後提示用戶需要重新刷新條碼。對已使用或過期的券，前端會以灰化樣式顯示，標註「已使用」或「已過期」，防止用戶誤用。

使用流程（優惠券/禮券）：
小明透過每日簽到和小遊戲，現在在錢包裡積累了 800 點會員積分。他打開「會員錢包」，切換到「優惠券」分頁，看到目前可供兌換的優惠券列表：有「滿500折50」（需要300點）、有「商城免運券」（需要200點）等。小明選擇兌換一張「滿500折50」優惠券。系統二次確認後扣除了他300點積分，立刻在「我的優惠券」中新增了一張券碼，例如「SAVE50ABCD」。小明複製了這個券碼。隨後他前往官方商城選購商品，將總價值 650 元的遊戲週邊加進購物車。進入結帳頁面時，他找到「使用優惠券」的輸入框，貼上剛才複製的券碼並按下「套用」。後端經驗證確認此券有效且滿足滿500使用條件，立即計算折抵 50 元。前端的訂單總額從 650 元降為 600 元，優惠券顯示已成功使用。小明開心地支付剩餘款項完成訂單，此時系統將該券標記為已使用。幾分鐘後，小明刷新「我的優惠券」列表，那張「SAVE50ABCD」券已移至「已使用」區域並灰掉處理。

另一邊，小明在某活動中還用積分兌換了一張「100元電子禮券」，可到實體店兌換一款限定公仔。週末他前往合作店鋪，在手機上打開「我的禮券」，找到該張「100元公仔兌換券」。點擊「出示條碼」後，手機顯示一個 QR Code，店員用掃碼槍掃描了該碼。幾秒內，店員的系統提示「券碼有效，已成功兌換」，並把公仔交給小明。同時，小明手機上的券狀態變為「已使用」，QR Code 自動失效不再顯示。這說明系統的即時核銷功能發揮了作用：小明的EVoucher券碼在掃描時生成的一次性Token已被標記使用，防止重複兌換。店員也很方便地完成了核銷操作。小明對這整個流程感到滿意，認為電子禮券比傳統紙本方便許多，而且在 App 裡就能管理，不怕遺失。

隨著各種活動參與，小明錢包裡的優惠券和禮券越來越多，但系統精心的分類與狀態管理讓他一目了然：哪些券尚未使用、即將過期都有清晰標註。他也計畫在優惠券過期前趕緊使用掉，以免浪費。（附註：如果小明某張券過期了，他在「已使用/過期」區域仍能看到該券資訊，但無法再進行任何操作。）

整體而言，優惠券/禮券系統為 GameSpace 平台建立了點數、活動與消費之間的有機聯繫：用戶參與平台活動賺取積分，再用積分兌換券去消費商城商品或線下周邊，形成一個良性的循環。同時嚴謹的核銷與安全機制確保了虛擬券的使用不被濫用或作弊。

官方商城系統

功能描述：官方商城系統提供平台銷售官方發行商品的管道，包括數位商品（如遊戲序號、點卡）、實體周邊（如遊戲主題T恤、公仔）以及會員服務（如VIP方案）等類型。會員可以在商城瀏覽商品目錄、將商品加入購物車並完成線上訂單付款。商城系統涵蓋了商品資訊管理、訂單處理、付款流程及庫存更新等全流程。對應的主要資料表包括：ProductInfo（商品主檔資訊）、OrderInfo（訂單主檔）、OrderItems（訂單項目明細）、Supplier（供應商資訊）和 Official_Store_Ranking（官方商城銷售榜）等。

資料結構：

ProductInfo 表儲存商城銷售的所有商品資料。欄位有 Product_ID（主鍵）、product_name（商品名稱）、product_type（商品類型，如「數位序號」或「實體周邊」等）、price（售價）、currency_code（幣別，預設NTD或台幣符號等）、shipment_quantity（庫存數量）、product_created_by（創建者識別，可填管理員名稱或ID）、product_created_at（建立時間）、product_updated_by（最後更新者）、product_updated_at（最後更新時間）、user_id（如有關聯會員的ID，例如某些商品可能由會員上架，這欄存賣家ID）等。對於不同類型商品，還有對應的詳情表：GameProductDetails 和 OtherProductDetails。GameProductDetails 包含遊戲類商品的細節，如 platform_id（遊戲平台代號）、game_id（對應的遊戲ID）、download_link（下載連結）等；OtherProductDetails 則包含非遊戲類商品的屬性，如尺寸(size)、顏色(color)、重量(weight)、材質(material)等。兩個詳情表都以 product_id 作為外鍵連回 ProductInfo。這種設計將通用欄位放在 ProductInfo，特殊欄位分開管理，確保資料結構清晰。

Supplier 表紀錄商品供應商資訊。欄位有 supplier_id（主鍵）、supplier_name（廠商名稱）等。商品可透過 ProductInfo 中的某欄（可能是 supplier_id）關聯供應商，方便管理者追蹤供應來源和進貨資訊。

OrderInfo 表儲存訂單主檔資訊。欄位包括 order_id（訂單ID，主鍵）、User_ID（下訂單的會員ID，外鍵參照 Users.User_ID）、order_date（下單日期）、order_status（訂單狀態，如「未付款」、「已出貨」、「已完成」等）、payment_status（付款狀態，如「待付款」、「已付款」）、order_total（訂單總額）、payment_at（付款完成時間）、shipped_at（出貨時間）、completed_at（訂單完成時間）等。訂單狀態和付款狀態分開紀錄，以支持例如「已取消但未付款」、「已付款待出貨」等複雜情形。

OrderItems 表是訂單項目明細。欄位有 item_id（項目ID，主鍵）、order_id（所屬訂單ID，外鍵到 OrderInfo）、product_id（商品ID，外鍵到 ProductInfo）、line_no（項目序號，標識是該訂單的第幾項產品）、unit_price（該項商品單價，紀錄下訂當時價格以防止日後價格變動影響歷史訂單）、quantity（購買數量）、subtotal（小計金額，unit_price * quantity）。通過 OrderItems，可以重建訂單的購買內容明細。

Official_Store_Ranking 表紀錄官方商城銷售排行榜資料。欄位包括 ranking_id（流水號，主鍵）、period_type（榜單類型，如 "日"、"月"、"季"、"年"）、ranking_date（榜單所屬日期）、product_ID（商品ID，指向 ProductInfo.product_id）、ranking_metric（排行指標，如 "交易額" 或 "交易量"）、ranking_position（名次）、trading_amount（該期間該商品的交易額總計）、trading_volume（交易量，即銷售數量總計）、ranking_updated_at（榜單更新時間）。該表主要由系統後台批次程式定期計算生成，用於顯示商城中哪些商品最暢銷。索引方面，period_type + ranking_date 應為複合唯一（每個期間只有一份榜單），並可按 ranking_position 查詢Top N商品。

交易流程：會員在官方商城的購物過程通常如下：瀏覽商品 -> 加入購物車 -> 提交訂單 -> 支付 -> 平台出貨。由於目前系統未實作獨立的「購物車」資料表，購物車流程可由前端維護（將選中的商品暫存localStorage）或使用Session保存（根據資料庫結構，暫不深入購物車細節，假定直接下單流程]）。

會員點擊商品詳情頁的「立即購買」或「加入購物車」按鈕後，最終會到「結帳」頁面。在結帳頁上，會員確認收貨資訊（若為實體商品則需地址等資訊；數位商品則可能不需要地址）、訂單明細和金額。此時他可選擇使用錢包中的優惠券折抵（在輸入框填入券碼或選取券）。當會員提交訂單時，前端調用 POST /api/order/create 等API，將訂單內容（商品IDs, 數量, 收貨地址等）發送給後端。後端首先重新驗證商品的當前售價、庫存是否足夠，然後創建 OrderInfo 紀錄（order_status 初始為「待付款」、payment_status 初始為「下單」或「未付款」）。隨後插入 OrderItems 紀錄對應訂單中的每件商品。如果會員使用了優惠券，則會在這個階段套用折扣計算更新 order_total 並鎖定該券。接著，系統請求付款：可能導向第三方金流（如信用卡、PayPal）或使用會員錢包餘額支付（若規劃允許錢包點數抵現）。在這個規格中，預期使用外部金流完成付款，因此payment_status 要等金流回調結果更新。假設會員選擇信用卡並完成付款，平台收到支付成功通知後，將 OrderInfo.payment_status 更新為「已付款」，payment_at 填入時間；並將 order_status 更新為「待出貨」。接下來由商城管理員或自動流程安排出貨：當商品已出庫寄送時，更新 shipped_at 和 order_status =「已出貨」；當會員收到商品或訂單完成，更新 completed_at 並將 order_status =「已完成」。整個訂單生命周期就此結束。

在數位商品（如遊戲序號）購買的情況，出貨可以是即時的：支付確認後，系統自動生成序號提供給用戶，並將 order_status 直接設為已完成。這種情況下 OrderInfo.shipped_at 可以留空或與 completed_at 相同時間。

自由市場（玩家交易）系統：官方商城之外，GameSpace 還提供一個 C2C 模式的玩家自由交易市場。此部分雖可視為商城系統的擴展，但其規則與官方商城不同：玩家可以自行刊登商品並進行點對點交易。自由市場涉及的資料表在此一併說明：

PlayerMarketProductInfo：玩家市集商品資訊。欄位包括 p_product_id（主鍵）、p_product_type（商品類型，如「二手遊戲帳號」等玩家自定義類型）、p_product_title（商品標題，一句話宣傳語）、p_product_name（商品名稱詳細描述）、p_product_description（商品描述內容）、product_id（對應官方商品ID，可為 NULL 若非官方掛單商品）、seller_id（賣家會員ID，外鍵參照 Users）、p_status（商品狀態，如「上架中」、「已售出」、「已下架」）、price（定價）、p_product_img_id（封面圖片ID，用於顯示主圖）、created_at、updated_at 等。

PlayerMarketProductImgs：玩家市集商品圖片表。欄位有 p_product_img_id（主鍵）、p_product_id（外鍵，對應 PlayerMarketProductInfo）、p_product_img_url（圖片連結）。每個商品可有多張附圖。

PlayerMarketOrderInfo：玩家市集訂單主檔。欄位有 p_order_id（主鍵）、p_product_id（交易的商品ID）、seller_id（賣家ID）、buyer_id（買家ID）、p_order_date（下單時間）、p_order_status（訂單狀態，如「交易中」、「已完成」、「已取消」）、p_payment_status（付款狀態，如「待付款」、「已支付」）、p_unit_price（交易單價）、p_quantity（數量，通常1件，因多件可拆多單處理）、p_order_total（總價）、p_order_created_at、p_order_updated_at 等。

PlayerMarketOrderTradepage：交易頁面/過程表。由於玩家交易需雙方確認交付，Tradepage 表記錄交易進程：欄位有 p_order_tradepage_id（主鍵）、p_order_id（訂單ID外鍵）、p_product_id（商品ID外鍵）、p_order_platform_fee（平台手續費抽成額度，例如交易總額的5%）、seller_transferred_at（賣家標記已移交道具的時間）、buyer_received_at（買家標記已收到道具的時間）、completed_at（交易完成時間）。透過這些欄位可以協調交易：賣家移交後等待買家確認收貨，如果一定時間內買家未確認，平台客服可介入處理。completed_at填寫表示交易正式完成，p_order_status 也會轉為完成。

PlayerMarketTradeMsg：交易對話訊息表。欄位有 trade_msg_id（主鍵）、p_order_tradepage_id（外鍵，對應Tradepage）、msg_from（訊息發送者標識，例如 "seller" 或 "buyer"）、message_text（訊息內容文本）、created_at（訊息時間）。買賣雙方可透過交易頁面進行聊天溝通交付細節，所有對話存於此表供查證。

玩家交易流程：賣家會員先在自由市場刊登商品：透過前端「刊登商品」表單填寫 PlayerMarketProductInfo 所需資訊並提交，後端建立商品記錄並狀態設為「上架中」。買家瀏覽自由市場列表，選擇感興趣的商品點擊「購買」。系統彈出訂單確認窗，買家確認後創建 PlayerMarketOrderInfo 訂單，狀態初始為「交易中」，付款狀態「待付款」。買家付款後（可能通過第三方或線下轉帳），付款狀態更新為「已支付」。此時平台通知賣家去進行物品交付：在 PlayerMarketOrderTradepage 中生成一筆記錄供雙方追蹤流程。賣家拿到款項憑證後，在交易頁面中標記「已移交」，系統記錄 seller_transferred_at 時間。買家驗收物品（例如檢查收到的虛擬道具是否正確）後，在交易頁標記「已收到」，系統記錄 buyer_received_at。此時如果雙方都確認交付無誤，平台將交易標記完成：completed_at 填入，p_order_status 更新為「已完成」。平台根據 PlayerMarketOrderTradepage 中的平台抽成比例，從款項中扣除手續費 p_order_platform_fee，將淨款撥給賣家或計入賣家的「可提現餘額」（若有金流系統）。在交易過程中，雙方可以使用 TradeMsg 介面交流，例如賣家可以留言「我已經透過遊戲郵件寄出道具，請查收」，買家確認收到後回覆「已收到，感謝！」。所有這些訊息永久保存，以便若發生爭議平台管理員可調閱。若交易過程出現糾紛（如買家稱未收到物品但賣家堅稱已給），管理員可介入調查，根據 TradeMsg 和雙方證據作出仲裁，例如取消訂單並將款退給買家或強制完成訂單。

排行榜：官方商城和自由市場各自有銷售排行榜功能，用於展示熱門商品和活躍交易。Official_Store_Ranking（官方商城榜）按日/月/季/年的銷售數據計算排名；PlayerMarketRanking（玩家市場榜）則按類似週期計算自由市場的熱門交易排行。例如系統每天結束時統計當日每個 Product 在官方商城的銷售額和銷量，取前10名寫入 Official_Store_Ranking 表 period_type="日"。同樣地，自由市場中的 PlayerMarketProductInfo 可依交易完成訂單統計交易額/量並寫入 PlayerMarketRanking。前端首頁可以顯示日榜Top5商品，並提供連結查看完整榜單頁。使用者在排行榜頁可以切換查看日榜、週榜、月榜等，並按銷量或銷售額排序。這些排行榜能增加平臺的競爭和社群話題性，促使賣家優化商品、買家發現熱門。

管理後台：官方商城由管理員維護商品上架與訂單處理。管理員可透過後台介面新增/編輯 ProductInfo，包含上傳商品圖片、設定價格與庫存等。當有新訂單產生，管理員會在後台「訂單管理」中看到訂單列表及詳情，可以篩選「待付款/待出貨/已完成」等狀態。對於待出貨的訂單，管理員核對付款無誤後，安排出貨（對於數位商品則可直接點擊完成），並在訂單詳情中填寫例如物流追蹤碼（若有實體配送）。後台同時可以處理退款/退貨：如買家申請退貨，管理員審核後修改訂單狀態並處理款項原路退回，相關商品庫存增加。此外管理員也可在後台調整排行榜計算策略，如改變統計口徑或重新生成特定日期的榜單。

安全與風控：商城系統處理真實交易，必須確保支付與訂單資料安全。平臺對金流使用加密連接，例如嵌入第三方支付Gateway的加密表單或跳轉至其安全頁面付款。管理員後台不會存儲完整的信用卡資訊，只紀錄交易編號與結果，以免敏感資料外洩。系統設有防詐欺機制：監控异常訂單行為（例如同一會員在極短時間內下大量高額訂單且不同收貨地址），如有則標記風險並通知客服人工跟進。所有支付相關操作寫入審計日誌，包括付款請求、回調結果、退款操作等。資料備份與災難復原計畫也覆蓋關鍵交易資料，確保即便發生系統故障，訂單與支付記錄不會遺失。

使用流程（官方商城購物）：
小明打算在官方商城購買一款新上市的遊戲虛擬序號。他進入官方商城首頁，看到商品依類別分類整齊排列，有「遊戲」、「周邊」、「點卡」等分類篩選。小明點擊「遊戲軟體」分類，瀏覽列表後選中目標遊戲「XYZ Online 序號卡」。點擊商品進入詳情頁，他查看了商品介紹和價格（NT$990），確認這是他想要的。他點擊「加入購物車」，系統提示已加入，購物車圖示上顯示「1」。隨後他又逛了「周邊商品」類別，將一件 NT$450 的遊戲主題T恤也加入了購物車。

小明點擊購物車進入結帳頁面，看到兩樣商品合計 NT$1440。這時他想到自己有一張「滿1000折100」的優惠券尚未用，於是在「優惠券」欄位輸入了券碼。系統驗證後顯示折抵100元，總額降為 NT$1340。小明確認收件資訊：因為序號卡是數位商品不需物流，而T恤屬實體商品，他輸入了地址。確認無誤後，小明點擊「提交訂單並付款」。系統跳轉到支付頁面，小明選擇信用卡支付並完成資訊填寫，銀行驗證通過，顯示扣款成功。返回平台時，訂單編號 #20230915001 顯示「付款完成，待出貨」。他在訂單詳情中看到序號卡的序號已直接提供（因為屬數位商品，即時交付），而T恤的物流資訊顯示「準備中」。兩天後，小明登錄平台查看該訂單，狀態已更新為「已出貨」，並提供了宅配追蹤碼。他過幾天收到包裹後，平台顯示訂單狀態「已完成」。他非常滿意這次購物體驗，優惠券幫他省了100元，整個流程順暢安全。

在這過程中，小明使用錢包中的優惠券折抵了部分款項，系統相應地將那張券標記為已用。平台在他付款成功後，也自動將商品庫存扣減（序號商品庫存-1，T恤庫存-1），確保庫存數據準確。他獲得的遊戲序號可以在遊戲官網兌換，平台也在他的訂單詳情中永久保存該序號以供查詢。整體而言，官方商城系統讓小明可以方便地使用在平台上賺取的點數和券，在同一地方買到遊戲和周邊，極大提高了他對 GameSpace 平台的忠誠度。

論壇系統

功能描述：論壇系統是 GameSpace 平台的社群核心，為每款遊戲設置獨立的討論板，供玩家們發表主題討論串（Threads）和回覆帖子（Posts）。每個遊戲對應一個論壇版面 (forums 表)，論壇下用戶可以發表無數討論串，串中又包含許多回覆樓層 (thread_posts)。論壇系統亦支援對文章/帖子的按讚 (like) 和收藏 (bookmark) 功能，以促進互動。

資料結構：

forums：論壇版面主檔。每筆紀錄代表一個討論版，通常對應一款遊戲。欄位包含 forum_id（主鍵）、game_id（所屬遊戲ID，一對一關聯到遊戲清單 games 表）、name（版面名稱，例如遊戲中文名稱或簡稱）、description（版面介紹/版規）、created_at（建立時間）。一個遊戲只能有一個討論版，因此 game_id 一般是唯一的。

threads：討論串（主題）表。每筆代表用戶發起的一個討論話題。欄位包括 thread_id（主鍵）、forum_id（所屬論壇ID，外鍵到 forums 表）、author_User_ID（主題作者的會員ID，外鍵到 Users 表）、title（主題標題）、status（狀態，如 "normal" 正常、"hidden" 隱藏、"archived" 封存等）、created_at（建立時間）、updated_at（最後回覆時間或編輯時間）。threads 表通常在 forum_id 上建立索引，配合 updated_at 排序，以便於快速抓取某論壇下最近更新的主題列表。

thread_posts：討論串回覆表。存放每一則回覆訊息。欄位有 id（主鍵，自增）、thread_id（所屬主題ID，外鍵到 threads 表）、author_User_ID（回覆者ID，外鍵到 Users 表）、content_md（回覆內容，以 Markdown 格式儲存，支援富文本）、parent_post_id（父回覆ID，用於兩層樓中樓結構：允許回覆別人的回覆，儲存被回覆的那樓ID；若無則表示直接回覆主題）、status（狀態，如 "normal" 正常、"hidden" 被版主隱藏、"deleted" 使用者自行刪除等）、created_at、updated_at。thread_posts 常在 thread_id+created_at 上設索引，便於按時間順序讀取某討論串的所有回覆。

權限與版主：論壇實施分級管理機制。某些討論版可能設有版主（Moderator），版主是從該遊戲社群中選出的管理者，負責日常內容審核。版主權限包括隱藏違規主題或回覆（將 threads.status 或 thread_posts.status 設為 hidden）、警告或暫時停權違規用戶（通過 User_Rights.User_Status 控制）等。更高層級的超級管理員（後台管理員）則擁有全面權限，可以封禁用戶、刪除內容（設定 status="deleted"）、調整討論版設定（修改 forums.description 等）。對於 threads 和 posts 的隱藏/刪除處理，前端在顯示列表時會自動過濾 status 非正常的內容。例如 threads.status="hidden" 的主題不會出現在一般用戶的列表中；thread_posts.status="deleted" 的回覆在前端可能以「該回覆已被刪除」字樣佔位但不顯示內容。權限檢查在後端執行，未具備版主或管理員權限的用戶試圖調用隱藏/刪除API時將返回403禁止。

文章系統與洞察：除了每款遊戲專屬的討論串，平台還允許發表一般文章，例如官方公告、攻略心得等。這部分內容存放在 posts 資料表。posts 是與論壇平行的發文系統，每篇 post 可不隸屬某特定論壇，但可以關聯一個遊戲以標記主題。欄位包括 post_id（主鍵）、type（文章類型，如 "insight" 表官方洞察文章，"user" 表一般會員文章）、game_id（文章關聯的遊戲，可為 NULL 表示不特定遊戲）、title（文章標題）、tldr（三行摘要，文章的重點提要）、body_md（正文內容 Markdown）、status（狀態: "draft" 草稿、"published" 已發佈、"hidden" 隱藏）、pinned（是否置頂推廣，布林值）、created_by（作者 UserID）、published_at、created_at、updated_at。posts 表上有幾個複合索引，例如 (type, created_at) 用於按照類型過濾最新文章列表、(game_id, created_at) 用於查詢特定遊戲的文章、(status, created_at) 用於後台按狀態篩選文章等。這套文章系統可以用來發佈例如「每周遊戲趨勢報告」（type="insight", game_id=null 表整站分析）、「玩家心得分享」（type="user", game_id=某遊戲）等。用戶可以對文章進行留言評論和按讚收藏，這些互動可重用論壇的回覆與按讚收藏功能（文章評論直接使用 thread_posts 結構來存，以符合現有DB設計，意即文章的留言功能可以將每篇文章視作一個特殊討論串，評論就存入 thread_posts 並以 target_type區分，避免新增新表）。

互動功能：論壇和文章均支援按讚與收藏。這透過通用的 reactions 表與 bookmarks 表實現。

reactions：多型反應表，用於存放使用者對各種目標的“讚”或其他表情反應。欄位有 id（主鍵）、User_ID（點讚者ID）、target_type（目標類型，字串，如 'post' 文章、'thread' 主題、'thread_post' 回覆等）、target_id（目標ID，對應不同表的主鍵）、kind（反應種類，預設例如 'like' 代表讚、未來可擴充 'love'、'haha' 等表情）、created_at（反應動作發生時間）。由於採用 target_type+target_id 多型設計，一張表即可容納對不同內容的點讚資料。該表設有唯一索引 (User_ID, target_type, target_id, kind) 避免同一用戶對同一內容重複給出相同反應。

bookmarks：多型收藏表。欄位類似 reactions，有 id、User_ID、target_type、target_id、created_at。target_type 可為 'post'（收藏文章）、'thread'（收藏討論串）甚至 'game'（關注遊戲）或 'forum'（關注版面）。索引 (User_ID, target_type, target_id) 設為 unique，保證每個用戶對同一項內容只能收藏一次。

透過 reactions 和 bookmarks，平台提供了豐富的互動體驗：在每篇文章、討論串或回覆的界面上，前端會顯示當前的按讚數和收藏數。若用戶尚未按讚某內容，點擊「讚」按鈕時前端調用 POST /api/reactions 新增一筆記錄；第二次點擊則可以視為取消讚，後端刪除對應記錄。收藏同理：用戶點擊收藏圖標會新增 bookmarks 記錄，再點一次取消收藏就刪除記錄。後端在處理時會檢查資料是否已存在，若發現重複按讚請求則返回錯誤避免重複寫入；如果是取消但記錄不存在也返回錯誤或忽略。這確保數據一致性。

使用流程：論壇系統的使用從瀏覽版面開始。玩家可以透過首頁的「論壇」入口進入論壇列表頁，看到平台上所有遊戲的討論板名稱和簡介，以及當前主題數/回覆數等概況。點擊某遊戲名稱後，進入該遊戲論壇，展示該版的主題列表。列表預設按最後回覆時間排序，最新被討論的串會顯示在最上方。每個主題項目通常顯示標題、發帖人、發帖時間、回覆數、最後回覆時間/人等資訊。玩家可以使用搜尋功能在當前版面內按關鍵字查找相關主題。版面頂部通常貼有版規、公告，以及版主名單。

當玩家想發表新話題時，點擊「發表主題」按鈕進入發帖頁面。在這裡他輸入標題和內容（支持 Markdown 格式編輯），寫好後提交。後端收到請求，會先檢查使用者是否有權在此版發文（檢查 User_Rights.MessagePermission 及是否被該版封禁等）。若通過，則在 threads 表插入新紀錄並返回成功。前端隨即跳轉到新主題頁面，玩家和其他訪問者都能看到他的發文。如果玩家在發帖界面選擇保存草稿而非立即發佈，則 status="draft"，只有他自己可見，在他進入論壇時會顯示「您有未發佈的草稿」提醒，可繼續編輯或發布。

其他用戶瀏覽到該主題後，可以在下方撰寫回覆。每個回覆內容都使用 Markdown 編輯框撰寫，也可以引用或@其他人。提交回覆時，後端在 thread_posts 表記錄新回覆並更新 thread 的 updated_at 為當前時間。前端則及時將新回覆插入頁面底部。如果某人要回應特定樓層，可以點擊「回覆」按鈕，此時前端會標記 parent_post_id 並在回覆內容前自動添加引用那樓的片段。這種回覆別人的回覆將在資料庫中保存 parent_post_id，前端顯示時可能以縮進或「回覆 @某用戶」標註來體現層級。

在瀏覽討論串時，用戶可以對喜歡的發言按讚或對主題按讚。小明看到一篇討論串內容很優質，點擊了樓主的「讚」圖示。前端發請求新增 reaction（target_type='thread'），後端成功寫入後返回新的總讚數 15。前端即時更新該帖子下方的「👍 15」計數。另一篇回覆中有人提供了解決方案，小明也點了個👍支持。稍後，小明發現一個討論串話題對他很有用，希望日後快速找到，於是點擊收藏圖標。系統在 bookmarks 表加了一筆（User=小明, target_type='thread', target_id=該串ID），前端圖標變亮表示收藏成功。下次他可以從「我的收藏」列表中直接找到這個討論串進行查看。

對於版主或管理員，用戶在前端會看到他們在帖子列表或內容頁有額外的管理按鈕（通過權限控制顯示）。例如版主小紅覺得某回覆言詞不當，點擊「隱藏」按鈕。前端呼叫 /api/thread_posts/123/hide（假設API），後端驗證她是版主，則將該回覆 status 設為 "hidden"。前端即刻以半透明方式顯示該樓層並註明「此回覆已被版主隱藏」，內容不可見。若嚴重違規，管理員小李甚至可以刪除整個討論串，方法類似，系統將 threads.status 改為 "hidden" 或 "deleted"，從列表移除該主題。對於被刪除/隱藏內容的作者，系統可能發送通知提醒如「您的帖子《標題》因違規已被移除」。

使用流程（論壇互動）：
小明是一位《英雄戰紀》遊戲的愛好者，他每天都會瀏覽 GameSpace 上該遊戲的論壇版面，看看有無新帖。今天他進入《英雄戰紀》論壇，看到有一個新主題：「
攻略
攻略 新手快速上手指南」。這正是他感興趣的內容，小明點進去細讀樓主分享的攻略。覺得寫得很棒，他給樓主點了個👍（此時樓主的貼文讚數從 10 變11）。閱讀過程中，小明對其中一段有疑問，於是在主題下方發表了回覆提問。大約幾分鐘後，樓主回覆了解答，小明收到一個站內通知「你的回覆有了新答覆：...(樓主暱稱) 回覆了你」。小明再次訪問該串，看到了樓主對他的@提及和詳細回答。他對樓主表示感謝，又點了樓主這條回覆一個👍。

接著，小明準備自己發一個主題討論。他點擊《英雄戰紀》版面的「發表主題」，輸入標題「請教關於魔法師加點的問題」，內容描述了自己的疑惑並@了某知名玩家請教。發表後，不少熱心玩家回覆了他，包括他@的那位玩家也給出了詳盡的建議。小明對其中最有幫助的一則回覆按了「有幫助」的表情（系統可能未實現不同表情區分，目前當普通like處理，目前 kind 欄位主要使用 'like' 作為表情類型，本平台尚未區分不同Emoji反應）。討論中有一位玩家回答內容不太友善，小明尚未做什麼，但很快看到版主將該玩家的回覆隱藏了，並留言請他注意語氣。討論變得更有序，小明順利解決了問題。他將自己的主題標記為「已解決」（假設有此功能，可能管理員可編輯標題或添加解決標記）。

最後，小明覺得這串討論對其他新人也很有幫助，就在底部留下「此文值得收藏」的字樣並收藏了該主題。之後他可以在個人中心很方便地找到這個主題。論壇系統成為小明日常獲取資訊、提問求助和結交同好之處。他樂於參與討論，也享受在自己的帖子收到讚和回覆的成就感。

社群與即時互動系統

功能描述：社群系統包括好友、群組和即時聊天等功能，旨在加強玩家之間的社交互動。用戶可以互相加為好友，好友之間可進行一對一私訊聊天；用戶也可以建立群組聊天室，邀請多位玩家一起討論。同時，平台有通知系統用於實時推送各類事件提醒給用戶，例如好友請求、私訊新消息、帖文被回覆或點讚等。社群互動功能增進了玩家黏著度，讓 GameSpace 不僅是一個資訊論壇，更是一個活躍的遊戲社區。

好友系統：用戶之間可以透過搜尋暱稱或ID發送好友申請。當A想加B為好友時，系統在 Relation 表插入一筆記錄表示「A邀請B，狀態=待確認」。Relation 表欄位包括 relation_id（主鍵）、User_ID（發起方ID）、friend_id（接收方ID）、status_id（關係狀態，如1=待確認、2=好友、3=摯友、4=封鎖）、friend_nickname（好友暱稱備註，可由用戶自定）、created_at、updated_at。收到好友邀請的用戶B會在通知中心看到「用戶A想加你為好友」的通知。B可以選擇接受或拒絕：若接受，後端將原Relation記錄的 status_id 更新為「好友」狀態，並（可能）插入對稱的另一筆記錄 B->A 或採用單筆雙向邏輯處理。資料庫Relation表目前設計成單向關係，因此A->B和B->A各有一筆，兩筆狀態一致表示互為好友（資料庫尚未完全明確是否雙筆儲存好友關係，本說明假設雙筆，依現有 Relation 表設計雙向記錄模型，維持資料一致性）。如果B拒絕或忽略，Relation.status_id 保持為1或轉為一個特殊值表示被拒。

用戶也可以封鎖他人：封鎖後將在 Relation 表新增/更新一筆關係，狀態設為「封鎖」。例如小紅封鎖小明，則 Relation 中小紅->小明會存在 status_id=4 的紀錄。被封鎖用戶將無法再發送好友申請、私訊或邀請封鎖者進入群組。後端在處理聊天或群組邀請時都需要檢查雙方是否存在封鎖關係並拒絕相應操作。Relation_Status 表定義了各種狀態的ID對應名稱，如1=待確認、2=好友、3=摯友（可能的擴充，如特別關注）、4=封鎖。

聊天系統：聊天分為私聊（一對一聊天）和群聊兩種。私聊的訊息存儲在 Chat_Message 表。欄位有 message_id（主鍵）、manager_id（若此訊息由管理員客服發出則填管理員ID，否則NULL）、sender_id（發送者會員ID）、receiver_id（接收者會員ID）、chat_content（訊息內容文字，至多255字符）、sent_at（發送時間）、is_read（接收者是否已讀，布林）、is_sent（訊息是否已成功送達，布林，通常固定為1除非發送失敗）。用戶之間發送私訊時，後端在 Chat_Message 表新增記錄並即時透過 WebSocket 將訊息推送給在線的接收者。若接收者當時不在線，則當其下次上線時系統會將未讀消息推送或通過通知提醒。前端聊天UI顯示雙方的對話類似常見IM，並標記未讀訊息數量。用戶也可以刪除（自己視圖中）某則聊天，但為保證紀錄留存，後端一般不真刪此訊息，只是前端過濾或標記已刪。

聊天訊息傳輸需要考慮即時性與安全性。系統採用 WebSocket 通道維持在線用戶的即時通信。所有訊息在傳輸層使用 TLS 加密，確保不被竊聽。為保障內容安全，後端對chat_content會掃描敏感詞（可利用 banned_words 表存放敏感詞清單）並過濾或替換違規字詞。系統實施防垃圾機制：對同一用戶短時間內發送大量重複訊息，會暫時禁言（可利用 Mutes 表定義禁言時長選項），並要求發送者通過簡易驗證（如 CAPTCHA）後才能繼續聊天。對於非好友關係的用戶首次聊天，可要求對方同意或驗證，避免騷擾。

群組系統：GameSpace 支援玩家建立群組，進行多人成員的交流。群組資訊存儲在 Groups 表。欄位有 group_id（主鍵）、group_name（群組名稱）、created_by（群主UserID）、created_at（建立時間）。群組成員關係存於 Group_Member 表。欄位包括 group_id（群組ID）、User_ID（用戶ID）、joined_at（加入時間）、is_admin（是否為群管理員，布林值）。Group_Member 設複合主鍵 (group_id, User_ID)，避免重複加入。群組聊天訊息則在 Group_Chat 表。欄位有 group_chat_id（群聊訊息ID，主鍵）、group_id（群組ID）、sender_id（發送者ID）、group_chat_content（內容）、sent_at（時間）、is_sent（是否已發送成功，布林）。群組聊的 WebSocket 頻道以群為單位，多人訂閱同一群組頻道即可實現群發。用戶加入群組後，可看到歷史聊天記錄（系統可限制只取最近N條或按日期分頁查詢以免資料過大）。

群組有管理與封鎖機制。群主或群管理員可以將某成員設為禁言（對應 Mutes 選項，可在 Group_Block 或Group_Member表透過 is_muted 實現，此處資料表尚未直接提供禁言欄，暫假設通過Group_Block或另設欄位）。被禁言者在解除前發送的群消息會被系統丟棄或不廣播。群組也可以封鎖成員：Group_Block 表存儲群組封鎖紀錄，欄位 block_id、group_id、User_ID（被封鎖者ID）、blocked_by（封鎖發起者ID）、created_at。被封鎖的用戶將無法再進入該群組聊天，群聊訊息也不會送達給他。Group_Block 表設置複合唯一索引 (group_id, User_ID)，確保同一群組不重複封鎖同一人。

通知系統：通知系統負責跨模組事件提醒，用戶可即時或稍後在通知中心查看通知。通知類型預定義在 Notification_Sources 和 Notification_Actions 字典表中。Notification_Sources 定義事件來源類型，如 1=系統公告、2=好友/群組事件、3=論壇互動等；Notification_Actions 定義行為類型，如 1=被提及（mention）、2=回覆(reply)、3=點讚(like)、4=好友邀請(friend_request)、5=系統通知(maintenance) 等，每個 action_name 唯一。Notifications 主表儲存每一則通知內容。欄位有 notification_id（主鍵）、source_id（來源類型ID，外鍵到 Notification_Sources）、action_id（行為類型ID，外鍵到 Notification_Actions）、sender_id（觸發者UserID，某些系統通知沒有觸發者則可能為系統ID或NULL）、sender_manager_id（若為管理員發起的則紀錄管理員ID，否則NULL）、notification_title（通知標題）、notification_message（通知內容訊息文本）、created_at（建立時間）、group_id（涉及的群組ID，若與群組相關則填）。Notifications 不區分接收對象，實際通知投遞記錄在 Notification_Recipients 表。該表欄位有 recipient_id（主鍵）、notification_id（通知ID，外鍵到 Notifications）、User_ID（接收者會員ID）、is_read（是否已讀，布林）、read_at（已讀時間）。Notification_Recipients 設唯一索引 (notification_id, User_ID)，保證同一通知不重複發給同一人。

當系統需要發送通知時，通常會：插入 Notifications 一筆主通知，然後為每個目標用戶插入一筆 Notification_Recipients。舉例：小明發表的主題被小紅回覆了，系統決定發通知給小明。source_id=論壇類別（假設值），action_id=回覆（reply），sender_id=小紅ID，notification_title="有人回覆了你的主題", notification_message="小紅 回覆了你發表的《請教魔法師加點》主題，點擊查看詳情..."。created_at=現在；接著插入 Notification_Recipients(User_ID=小明, is_read=0)。小明在線的話，前端透過SignalR/ WebSocket收到新通知事件，即時在頁面上彈出提示；若不在線，則下次登入時可在通知列表看見一條未讀通知。

通知系統實現了節流和保留策略：站內通知即時顯示，通知在資料庫中至少保留30天。部分重要事件（如註冊成功、帳戶升級、點數大量變動）也會發 Email 通知加強提醒。為避免通知泛濫，對於某些高頻事件會做節流，例如同一討論串短時間內多次有人回覆，只發送一條通知或合併內容。

安全與隱私：社群系統涉及用戶敏感交流，因此實施多種安全措施。如前述，聊天內容會自動檢測過濾敏感詞和惡意連結，防止不當資訊傳播。用戶可以透過「檢舉」功能舉報私訊或群組中的不當內容，管理員將收到這些舉報並視需要查看相關聊天記錄（管理員可透過 Chat_Message 或 Group_Chat 表調閱，但僅限特定有權人員）。為平衡隱私，非涉案情況下管理員不會查看用戶私聊內容，只有在有舉報或法院要求時經授權才能調閱。系統也記錄所有聊天活動的審計日誌（ChatAuditLogs 假想表）保存至少一年，以便在糾紛、申訴時提供證據。

使用流程（好友、聊天與通知）：
玩家小明在論壇中認識了熱心的玩家小紅，決定加她為好友以便私下請教。小明打開小紅的個人頁面，點擊「加為好友」。系統彈出確認對話框，他點擊送出請求。此時後端在 Relation 表中新增一筆記錄 status=待確認。幾秒鐘後，小紅在線，在她畫面右上角的通知鈴鐺出現一個紅點提示。她點開通知中心，看到一條「小明 想加你為好友」的通知。小紅點擊同意，系統將她和小明互相加入好友名單。兩人的通知中心各自新增一條「你與小紅現在是好友了！」提示，他們從此可以彼此私訊。

小明隨即點開聊天室，找到小紅的名字並開始私聊。他發了第一條訊息：「哈囉！很高興認識你～」。系統透過WebSocket將此訊息推送給小紅，若她當時恰好在聊天視窗，會立即彈出小明的訊息並播放提示音。小紅開心地回覆：「嗨嗨，有問題都可以問我哦🙂」。兩人愉快地聊了起來。過程中，小明發了一個貼圖（假設系統支援emoji和GIF），小紅那端也能正常顯示。聊到興起，他們決定揪幾個在論壇認識的玩家一起建一個「法師研討」群組方便交流。

小紅在群組頁面點擊「建立群組」，輸入群名「法師研討群」，並勾選好友清單中的小明以及另外兩位好友加入。系統建立群組記錄，將這幾人寫入 Group_Member 表，並發送通知告知他們「你已被加入群組『法師研討群』」。小明的通知中心出現此消息，他點擊進入該群聊天室。群裡已經有小紅打的招呼，小明也發了個貼圖Say Hi。大家開始在群裡討論遊戲裡法師的各種進階技巧。

期間，有位不在好友列表內的玩家阿黑也很想加入討論，小明直接把群組邀請連結發給阿黑。阿黑點擊連結申請加入群組，小紅（群主）收到系統通知「阿黑 想加入群組『法師研討群』」，她點擊同意後，阿黑便成為群成員。阿黑進群後講話口氣比較衝，連發多條令人反感的訊息。小紅多次勸阻無效後，使用群管理功能將阿黑禁言5分鐘。小紅在群聊UI長按阿黑的訊息，選擇「禁言5分鐘」選項（該選單由系統 Mutes 字典配置）。後端立即在群組維護的狀態裡把阿黑標記禁言（可能Group_Block或其他處理），接下來5分鐘阿黑發的訊息群內成員都看不到。阿黑很惱火，私聊小明破口大罵。小明覺得被騷擾了，於是直接在好友列表將阿黑「封鎖」。後端更新Relation狀態為封鎖（或者新增一筆封鎖關係），並且自動將阿黑從小明的好友列表移除。從此阿黑無法再給小明發私訊、也無法在群組中@小明或看到他的在線狀態。

經此風波，小紅決定以後群組要先審核成員再通過。她修改了群組設定（假設前端提供開關）。後來群組互動愈發熱絡，他們討論的成果甚至整理成文章發布在論壇。平台社群功能的完善讓小明感覺就像身處一個真正的玩家社團：有專題群組、個別交流和實時資訊通知。他每天打開GameSpace，不僅僅是為了查資訊，更是為了看看好友們在聊什麼新鮮事，這種歸屬感使他對平台產生了依賴。

遊戲熱度指標與排行榜系統

功能描述：遊戲熱度指標模組負責整合外部資料來源，監控分析各遊戲的熱門程度，並生成排行榜。該系統每日自動抓取多種平台的遊戲數據（如Steam同時在線人數、討論區發帖量、YouTube影片觀看數等），計算出每款遊戲的「熱度指數」，據此製作每日或每週的熱門遊戲排行榜。這為玩家了解遊戲趨勢提供了參考，也增加了平臺內容的豐富度。

資料結構：涉及數張資料表：games（遊戲清單）、metric_sources（指標來源清單）、metrics（指標定義）、game_source_map（遊戲與外部來源的對應）、game_metric_daily（每日原始指標數據）、leaderboard_snapshots（排行榜快照）等。

games：遊戲主檔表。列出平台關注的所有遊戲。欄位包含 game_id（主鍵）、name（英文名稱）、name_zh（中文名稱，可為NULL若無中文譯名）、genre（類型，如FPS、MOBA等）、created_at（記錄建立時間，用於標記何時將此遊戲納入追蹤）。

metric_sources：指標來源表。包含 source_id（主鍵）、name（來源名稱，如 "Steam"、"巴哈姆特"、"YouTube" 等）、note（備註，通常說明這個來源數據的抓取方式或限制，如 "透過公開API每日抓取最高在線人數"）。

metrics：指標定義表。欄位有 metric_id（主鍵）、source_id（外鍵，指此指標屬於哪個來源，例如Steam平台指標或論壇平台指標）、code（指標代碼名稱，用英文標識指標，如 "concurrent_users" 同時在線、 "forum_posts" 論壇發帖數）、unit（單位，例如 "users" 人數、"posts" 篇文章）、description（指標說明）。source_id+code 通常應唯一（同一來源不會定義兩次相同指標），在資料庫可設唯一索引。

game_source_map：遊戲來源對應表。用於將內部的 game_id 與外部資料來源的遊戲標識對應起來。欄位包括 id（主鍵）、game_id（外鍵，對應 games.game_id）、source_id（外鍵，對應 metric_sources.source_id）、external_key（外部來源的遊戲識別，例如在Steam的AppID，在巴哈的討論版ID等）。此表方便抓取程序將取得的外部數據歸屬到正確的內部遊戲。

game_metric_daily：遊戲指標每日數據表。每抓取到一筆某日某遊戲某指標的值，就插入或更新此表。欄位包括 id（主鍵）、game_id、metric_id、date（日期，通常只記YYYY-MM-DD不含時間）、value（該日該指標的值，已根據需要做過必要清洗和匯總）、agg_method（集計方法，如 "max" 表示該值是當日最大值、"avg" 表示日均值等，用於説明如何解讀 value）。若當日重複抓取同一指標可更新之，或可插多筆視設計而定，但為簡化可設唯一鍵(game_id, metric_id, date)每遊戲每指標每日一筆。

leaderboard_snapshots：排行榜快照表。定期（每日/每週）計算好的熱度排行榜存檔在此。欄位包括 snapshot_id（主鍵）、period（期間類型，如 'daily' 日榜，'weekly' 週榜等）、ts（時間戳，表示榜單生成的日期時間，對於日榜可用日期0點0分表示、週榜用週一0點）、rank（名次，整數1開始）、game_id（遊戲ID）、index_value（綜合熱度指數的值）。可能還有其他輔助欄位如各子指標構成等，但目前未細列，可透過JSON存放各指標詳情在另一表，如 post_metric_snapshot 中。leaderboard_snapshots 在 (period, ts, rank) 上可考慮建索引便於按期查Top N。

熱度指數計算：所謂「熱度指數」，是將多種不同來源的指標數據按一定權重或演算法合成的一個綜合值。例如可以定義：熱度指數 = 0.5 * (該遊戲當日最高在線人數 / Steam平台最高在線基準) + 0.3 * (該遊戲當日論壇發文數 / 巴哈論壇平均發文基準) + 0.2 * (該遊戲相關YouTube影片觀看數 / 參考值)。具體公式在系統中配置，可在管理後台進行調整。每日 ETL（抽取-轉換-載入）流程：

後端排程每晚（或每小時）呼叫各來源 API 或抓取網頁，獲取各遊戲的當日指標原始值。例如透過 Steam Web API 獲取每天最高同時在線玩家數；透過巴哈姆特討論版頁面抓取當日新增文章數；透過 YouTube Data API 獲取遊戲相關影片的觀看次數增量等。

將取得的數據進行必要清洗和單位換算，然後存入 game_metric_daily。若當日已有記錄則更新或合併。

當每日所有數據就緒後，系統根據定義的熱度指數公式計算每款遊戲的熱度值。為使不同指標量級可比，常對各指標先做歸一化處理（如除以各自最大值或用統計標準分）。把加權加總得到的值作為「熱度指數」，通常可再乘以100或1000進行適當放大成整數。

將結果按遊戲排序，取前N名作為當日熱度排行榜。排序結果以及每遊戲的熱度值存入 leaderboard_snapshots 表，period='daily', ts=當日日期, rank=排序名次, game_id, index_value=熱度指數。

若是每週榜，則在每週最後一天（如週日）計算過去7天的平均或累積熱度，類似步驟3、4保存 period='weekly' 的榜單。

排行榜應用：平台首頁設計了一個「熱門遊戲排行榜」區塊。預設顯示當日 Top10 熱門遊戲，列出名次、遊戲名稱及熱度指數。用戶可以點擊切換查看「本週」或「本月」熱門遊戲。排行榜中的遊戲名帶有連結，點擊將跳轉到該遊戲的詳細頁面。在遊戲詳細頁，會展現該遊戲的歷史指標趨勢圖，例如最近30天每天的熱度走勢折線圖，以及拆解的各項指標（每日在線、人數、討論數等）以圖表呈現。這部分數據可由前端調用例如 GET /api/games/{id}/metrics?range=30d 取得 game_metric_daily 中最近30天資料進行繪圖。

管理員在後台可以對熱度指標進行管理：例如在 UI 上增刪新的指標來源（往 metric_sources, metrics 增加記錄），調整權重公式（修改配置或程式），以及手動重新計算某天的榜單（可能提供「重算XX日榜單」按鈕）。考慮到性能，leaderboard_snapshots 表計算後儲存可供直接查詢，避免每次前端查榜單都現場計算。

使用流程（熱門榜查詢）：
每天登入GameSpace，玩家小明都會在首頁第一眼看到「今日遊戲熱度 Top5」榜單。例如顯示：1. 英雄戰紀（指數 95）、2. 傳說對決（88）、3. 絕地求生（80）...等。小明對榜首的《英雄戰紀》印象深刻——昨天它還排名第二，今天就躍居第一。他點擊「熱門遊戲排行榜」的更多連結，進入排行榜詳情頁。在那裡，他可以切換查看「日榜」「週榜」「月榜」。他選擇「週榜」，頁面顯示本週截至目前的Top10遊戲，並注明「更新於每週日午夜」。小明點回「日榜」，然後點擊了第一名的《英雄戰紀》遊戲名稱。系統打開該遊戲的專屬頁面，此頁匯集了該遊戲在平台內外的多維數據：包括熱度指數走勢圖、一段指數解讀文字（由平台小編撰寫的洞察文章，透過 posts 表 insight 類型存儲，展示在此）、該遊戲的論壇版塊連結，以及商城中該遊戲相關商品推薦。小明看到圖表中，《英雄戰紀》最近一週熱度飆升，尤其是論壇發帖數激增（圖例顯示論壇發帖指標曲線明顯上揚）。旁邊的解讀文字寫著：「《英雄戰紀》熱度攀升：隨著新資料片推出，昨日同時在線人數創下新高，討論區每日發文量較上週增長了200%。」小明作為該遊戲粉絲感到與有榮焉，更積極參與論壇討論。

同時，小明注意到排行榜上還有其他遊戲，比如《絕地求生》重新進入前五，這引起了他的興趣。他點擊進入《絕地求生》頁面查看熱度趨勢，發現最近直播觀看數推高了熱度（圖表顯示YouTube指標上升）。原來某主播舉辦了一場大型賽事。這些資訊若沒有排行榜統計，他很可能就錯過了。現在透過熱度排行榜，他能快速掌握不只自己關注遊戲，還包括整個遊戲圈的熱門動態。

從系統角度，熱門排行榜每天 0點自動計算生成，無需人為干預。萬一某日資料源抓取失敗，管理員也會收到通知並可手動補抓/重算該日榜單。對於因外部原因缺數據的遊戲，系統以最近有效值或行業平均值填補，避免指數失真。排行榜使GameSpace有了媒體屬性，用戶不僅為社群來，也為資訊數據而來，極大提升了平台黏性和權威性。

管理後台系統

功能描述：管理後台系統供平台管理員使用，用於管理網站上的各個模組和用戶。它涵蓋了使用者與權限管理、內容審核與維護、商城與交易管理、分析報表等多方面。只有具備管理員帳號 (ManagerData 表) 的使用者可以登入後台，且不同管理員依其角色擁有不同的許可權功能。管理後台一般實作為單獨的前端（例如 /admin 控制器下的頁面），透過 RBAC 控制各區塊訪問。

用戶與權限管理：管理員可在後台檢視會員列表、搜尋特定會員，並對違規用戶進行處置。例如管理員進入「使用者管理」介面，搜尋到用戶小黑，發現其在論壇多次違規言論。管理員可以點擊「停權」按鈕將其 User_Rights.User_Status 設為0（停權），系統會要求提供理由並記錄操作。被停權的帳號將無法登入前台。若需解除，管理員可再將狀態改回1。管理員也能透過該介面修改用戶的其他權限，如手動開通其商城購物權 (ShoppingPermission) 或論壇發言權 (MessagePermission)。通常默認情況下一般會員ShoppingPermission=1, MessagePermission=1 允許正常使用，只有特殊情況才調整。對有貢獻的會員，管理員甚至可以提升其 SalesAuthority=1 讓其申請成為賣家。

內容審核：後台提供「內容管理」模組，列出最近發表的文章、主題、回覆及舉報紀錄。管理員可在這裡快速查看和搜索內容關鍵字。當有違規內容舉報時（例如其他用戶按下「檢舉」按鈕），該模組會高亮顯示相關帖子，方便管理員審核處理。管理員點入違規內容後，能看到原帖內容、舉報理由、舉報者資訊等，然後可以直接在此介面對該內容執行操作如「隱藏/刪除 帖子」或「警告/停權 發帖者」。這些動作都會要求管理員確認並輸入備註，然後寫入 Log 以備將來追查。

交易與商城管理：後台「商城管理」模組讓管理員維護商品和處理訂單。在「商品管理」頁，管理員可以新增新商品（填寫 ProductInfo 和對應詳細表欄位）、編輯現有商品資訊（比如調價、修改描述，系統會同步寫入 ProductInfoAuditLog 紀錄變更）或下架商品（將 p_status 或 product_type 改變或設flag）。在「訂單管理」頁，管理員可以篩選訂單狀態，如查看所有「待出貨」訂單，一一點擊詳細後標記出貨。對於退款申請，管理員在此模組也能處理：若會員透過客服申請取消一筆已付款未發貨訂單，管理員核實後可點擊「退款」按鈕，系統將通過支付API發起退款交易並將該訂單的 payment_status 標為「已退款」、order_status 標為「已取消」。所有這些操作都要求管理員具備相應權限：例如只有「商城權限管理 (ShoppingPermissionManagement)」為真的管理員角色才能訪問商城管理模組。

社群管理：後台「社群管理」模組包括論壇管理、聊天監控、群組管理等子頁面。管理員可在「論壇管理」中調整論壇版塊設置（forums 表資料）：如增設新遊戲論壇（插入 forums 記錄）、修改版面描述或指定版主（可透過維護一張版主名單表，或直接賦予某用戶對應論壇管理權限，在規格中可能未細化）。管理員也能審核 posts 表中的官方文章投稿（type="insight"可能需管理員審核後才 publish）。在「聊天監控」頁，管理員可以檢視近期的聊天記錄關鍵詞（隱私原因不會全文顯示，除非涉及舉報），以及查看封鎖/好友數據統計。如發現異常行為（例如某IP在短時間註冊多個帳號並群發相同訊息），管理員可以用後台提供的工具快速封鎖該IP範圍或帳號群。

通知與公告管理：管理員可以透過後台發送全站公告或個別通知。比如產品團隊要在下週進行系統維護，需要廣而告之所有用戶。管理員可進入「公告管理」，撰寫公告內容（例如「伺服器將於9/20 02:00-05:00進行維護」）並選擇發佈對象（全部用戶）。後端會在 Notifications 表插入 source=系統公告、action=維護通知 的記錄，並批量生成所有用戶的 Notification_Recipients。在線用戶馬上會彈出通知，離線用戶下次上線時能看到未讀公告。

報表與分析：管理後台還提供各種資料視覺化報表，方便營運人員了解平台運行情況。例如「用戶成長曲線」「日活/月活人數統計」「貼文發表數趨勢」「商城銷售額統計」「最受歡迎遊戲排行榜報表」等等。這些報表可能內嵌 Power BI 圖表或以自製的圖表呈現。系統每日會將關鍵KPI存入資料庫或快取，後台讀取時即時生成圖表。管理員透過下拉選單可以選擇時間範圍、分群等來調整圖表呈現。例如查看過去30天每日新增註冊用戶 (user_registered 事件) 與每日簽到完成率 (daily_checkin_completed 事件)。管理員A調出報表後，發現最近簽到參與率下降，可能需要策划新活動來鼓勵簽到。這些洞察都來自於系統的事件追蹤資料：系統在各模組埋了事件點，如 user_registered、daily_checkin_completed、pet_leveled_up、game_completed、points_earned、coupon_received、evoucher_received 等。管理後台將這些事件數據每日彙總呈現，使管理團隊可以洞察用戶行為變化。

使用流程（管理員操作）：
作為一名GameSpace平台的內容管理員，小李每天上班後首先登入管理後台。進入Dashboard，他查看昨日日誌：有100位新用戶完成註冊、800人次每日簽到（參與率80%），寵物升級完成20次、小遊戲完成50局、發放優惠券30張、禮券5張。整體數據正常，無異常峰值。

接著，小李切換到「內容管理」，看到幾條待審核的舉報：一是某討論串有爭吵，他點開審閱後，決定將其中兩則辱罵的回覆隱藏並對涉事者小黑給予三天停權處分（他進入小黑的User_Rights將User_Status改為0並設LockoutEnd三天後日期）。第二條舉報是一篇攻略文章涉嫌抄襲，小李對比後，同意舉報並將該文章轉為隱藏狀態（posts.status="hidden"）。他把處理結果回覆給舉報者。

接下來小李切到「商城管理」，處理訂單。今天有5筆訂單狀態「待出貨」：他逐一確認這些訂單已付款無誤後，將庫存扣除並打印出貨單，將每筆訂單的 order_status 設為「已出貨」。其中一筆為數位商品，他直接按「完成訂單」，系統自動發送序號Email給買家並將訂單標記完成。

然後他查看「社群管理」。某聊天群組昨天產生了500+則訊息，他抽查關鍵字，發現一兩則出現違規字眼，不過查看上下文是玩家開玩笑，無惡意，他便未干預但記下用詞提醒日後注意。好友封鎖名單裡新增了10對封鎖關係，他大致瀏覽確認無異常（多為正常用戶間嫌隙封鎖）。

最後，小李進入「系統公告」模組，編輯一則公告通知明天凌晨的維護。他寫好標題「系統維護通知」和內容「伺服器將於明日淩晨2點進行維護，預計停機3小時」並選擇「全體用戶」發送。發送後數秒內，全站用戶（包含未登入的將於下次登入時）都收到了這條通知。

小李關閉後台時，回顧今天的工作：順利地處理了違規內容，保障了論壇秩序；監控了交易流程，讓買賣雙方滿意；發出了重要公告，提醒大家系統更新。這一切透過管理後台強大的功能都得以及時完成，使GameSpace平台能健康地運作下去。

資料分析與事件追蹤

功能描述：平台內部建立了一系列事件追蹤機制，用於收集用戶行為數據並進行分析報表。這些事件包括但不限於：新用戶註冊完成、每日簽到完成、連續簽到達成、寵物升級、遊戲挑戰完成、會員點數獲得、優惠券發放、禮券發放、系統維護通知發送等關鍵行為。系統將在對應動作發生時記錄事件，包含事件類型、觸發者、時間、相關對象ID等資訊，並可彙整用於營運決策和產品優化。

事件列表：以下列出系統定義的一些事件名稱（Event Name）及其含義：

user_registered：用戶成功完成註冊（記錄用戶ID、註冊時間）。

daily_checkin_completed：用戶當日簽到完成（記錄用戶ID、日期）。

streak_checkin_bonus：用戶達成連續簽到獎勵門檻（如7天或30天，記錄用戶ID、天數）。

pet_leveled_up：用戶的寵物升級（記錄用戶ID、寵物ID、新等級、時間）。

game_completed：用戶完成一局小遊戲（記錄用戶ID、遊戲PlayID、結果、時間）。

points_earned：用戶獲得會員點數（記錄用戶ID、點數值、原因，如簽到/遊戲/活動）。

points_spent：用戶消耗會員點數（記錄用戶ID、點數值、用途，如兌換券/購買商品）。

coupon_received：用戶獲得優惠券（記錄用戶ID、券碼、類型、獲得方式）。

evoucher_received：用戶獲得電子禮券（記錄用戶ID、禮券碼、類型）。

coupon_used：用戶使用優惠券（記錄用戶ID、券碼、訂單ID）。

evoucher_redeemed：用戶核銷電子禮券（記錄用戶ID、禮券碼、狀態）。

post_published：用戶發表文章或主題（記錄userID、帖子ID、類型）。

post_replied：用戶回覆帖子（記錄userID、thread/post ID）。

friend_request_sent/accepted：好友請求發送/接受。

user_blocked：用戶封鎖他人或被封鎖。

system_maintenance：系統維護通知事件（記錄執行維護的時間、時長）。

數據利用：上述事件資料存儲在後台分析數據庫或即時流處理系統中（具體實現可用 Azure Application Insights, Google Analytics 或自建log DB）。營運團隊定期查看這些指標的報表：例如每日新註冊用戶量（user_registered 數）、每日簽到率（daily_checkin_completed / 總登入人數）、7日留存率（某日 user_registered 的用戶在+7日是否有 daily_checkin_completed）等。若發現某指標異常，如 daily_checkin_completed 突降，團隊會調查原因（可能最近獎勵吸引力下降），並適時調整活動策略。

開發團隊也利用事件數據進行產品優化：例如統計 game_completed 事件中 Result="Abort" 的比例，發現某關卡放棄率特別高，可能該關卡難度過大導致體驗不佳，據此調整遊戲平衡。又如統計 coupon_used 發現85折券使用率極低，說明門檻可能定得過高或用戶對此興趣不大，可以在下次活動中調整優惠力度。

實現細節：事件紀錄透過應用程式內的鉤子實現。例如在註冊流程成功處理的最後，呼叫 EventTracker.Log("user_registered", userId)。EventTracker 會將事件及屬性寫入資料儲存（可能是資料庫的 Events 表，或發送到訊息佇列供後台消費）。一些事件可能敏感如 user_blocked，也可選擇只做統計不記錄雙方資訊以保護隱私。系統對事件數據進行匿名化分析，不會泄露個人隱私，只關注整體趨勢。

綜上，資料分析與事件追蹤系統為GameSpace提供了度量和洞察的能力。它量化了用戶與平台互動的各個環節，讓管理者能以數據為依據進行決策，持續改進產品體驗。同時這些數據也為外界展示平台成長（如註冊人數突破里程碑）提供了可信的依據。

重大差異說明與不確定事項：

會員錢包系統調整：原規格將「優惠券/禮券數量」欄位放在 User_Wallet 表中；經與資料庫結構比對，決定將券類資產獨立到 Coupon、EVoucher 表管理。因此，本文件中錢包表只保留點數餘額欄位。

每日簽到輔助表：目前透過 UserSignInStats 的索引即可實現判斷是否簽到。

文章評論實現：使用 thread_posts 儲存文章評論，這種方法利用 target_type 區分即可支援，資料庫無需變動。

購物車機制：資料庫無專門Shopping Cart表，本規格略去購物車實作細節（假定直接下單流程，購物車以Session處理），未影響關鍵交易邏輯。未來若要支持持久化購物車，須新增相關表。

即時聊天高級功能：以文字聊天為主（僅在界面允許Emoji字符，無專門影音訊息存儲）。

平台擴展方向：未來計劃可以發展例如約玩配對系統、AI 推薦、動態牆等（這些在資料庫和現有模組中尚無具體支援）。
